<?php

namespace App\Enums;

use Filament\Support\Contracts\ScalableIcon;
use Filament\Support\Enums\IconSize;

enum CarbonIcon: string implements ScalableIcon
{
    case _4kFilled = '4k-filled';
    case _4k = '4k';
    case AcceptActionUsage = 'accept-action-usage';
    case AccessibilityAlt = 'accessibility-alt';
    case AccessibilityColorFilled = 'accessibility-color-filled';
    case AccessibilityColor = 'accessibility-color';
    case Accessibility = 'accessibility';
    case Account = 'account';
    case AccumulationIce = 'accumulation-ice';
    case AccumulationPrecipitation = 'accumulation-precipitation';
    case AccumulationRain = 'accumulation-rain';
    case AccumulationSnow = 'accumulation-snow';
    case ActionDefinition = 'action-definition';
    case ActionUsage = 'action-usage';
    case Activity = 'activity';
    case AddAlt = 'add-alt';
    case AddChildNode = 'add-child-node';
    case AddComment = 'add-comment';
    case AddFilled = 'add-filled';
    case AddLarge = 'add-large';
    case AddParentNode = 'add-parent-node';
    case Add = 'add';
    case AgricultureAnalytics = 'agriculture-analytics';
    case AiBusinessImpactAssessment = 'ai-business-impact-assessment';
    case AiFinancialSustainabilityCheck = 'ai-financial-sustainability-check';
    case AiGenerate = 'ai-generate';
    case AiGovernanceLifecycle = 'ai-governance-lifecycle';
    case AiGovernanceTracked = 'ai-governance-tracked';
    case AiGovernanceUntracked = 'ai-governance-untracked';
    case AiLabel = 'ai-label';
    case AiLaunch = 'ai-launch';
    case AiRecommend = 'ai-recommend';
    case Ai = 'ai';
    case AirlineDigitalGate = 'airline-digital-gate';
    case AirlineManageGates = 'airline-manage-gates';
    case AirlinePassengerCare = 'airline-passenger-care';
    case AirlineRapidBoard = 'airline-rapid-board';
    case AirplayFilled = 'airplay-filled';
    case Airplay = 'airplay';
    case Airport01 = 'airport-01';
    case Airport02 = 'airport-02';
    case AirportLocation = 'airport-location';
    case AlarmAdd = 'alarm-add';
    case AlarmSubtract = 'alarm-subtract';
    case Alarm = 'alarm';
    case AlignBoxBottomCenter = 'align-box-bottom-center';
    case AlignBoxBottomLeft = 'align-box-bottom-left';
    case AlignBoxBottomRight = 'align-box-bottom-right';
    case AlignBoxMiddleCenter = 'align-box-middle-center';
    case AlignBoxMiddleLeft = 'align-box-middle-left';
    case AlignBoxMiddleRight = 'align-box-middle-right';
    case AlignBoxTopCenter = 'align-box-top-center';
    case AlignBoxTopLeft = 'align-box-top-left';
    case AlignBoxTopRight = 'align-box-top-right';
    case AlignHorizontalCenter = 'align-horizontal-center';
    case AlignHorizontalLeft = 'align-horizontal-left';
    case AlignHorizontalRight = 'align-horizontal-right';
    case AlignVerticalBottom = 'align-vertical-bottom';
    case AlignVerticalCenter = 'align-vertical-center';
    case AlignVerticalTop = 'align-vertical-top';
    case AnalyticsCustom = 'analytics-custom';
    case AnalyticsReference = 'analytics-reference';
    case Analytics = 'analytics';
    case Anchor = 'anchor';
    case Aperture = 'aperture';
    case Api1 = 'api-1';
    case ApiKey = 'api-key';
    case Api = 'api';
    case AppConnectivity = 'app-connectivity';
    case App = 'app';
    case AppleDash = 'apple-dash';
    case Apple = 'apple';
    case ApplicationMobile = 'application-mobile';
    case ApplicationVirtual = 'application-virtual';
    case ApplicationWeb = 'application-web';
    case Application = 'application';
    case Apps = 'apps';
    case Archive = 'archive';
    case AreaCustom = 'area-custom';
    case Area = 'area';
    case ArithmeticMean = 'arithmetic-mean';
    case ArithmeticMedian = 'arithmetic-median';
    case ArrangeHorizontal = 'arrange-horizontal';
    case ArrangeVertical = 'arrange-vertical';
    case Arrange = 'arrange';
    case ArrayBooleans = 'array-booleans';
    case ArrayDates = 'array-dates';
    case ArrayNumbers = 'array-numbers';
    case ArrayObjects = 'array-objects';
    case ArrayStrings = 'array-strings';
    case Array = 'array';
    case Arrival = 'arrival';
    case ArrowDownLeft = 'arrow-down-left';
    case ArrowDownRight = 'arrow-down-right';
    case ArrowDown = 'arrow-down';
    case ArrowLeft = 'arrow-left';
    case ArrowRight = 'arrow-right';
    case ArrowShiftDown = 'arrow-shift-down';
    case ArrowUpLeft = 'arrow-up-left';
    case ArrowUpRight = 'arrow-up-right';
    case ArrowUp = 'arrow-up';
    case ArrowsHorizontal = 'arrows-horizontal';
    case ArrowsVertical = 'arrows-vertical';
    case AsleepFilled = 'asleep-filled';
    case Asleep = 'asleep';
    case AssemblyCluster = 'assembly-cluster';
    case AssemblyReference = 'assembly-reference';
    case Assembly = 'assembly';
    case AssetConfirm = 'asset-confirm';
    case AssetDigitalTwin = 'asset-digital-twin';
    case AssetMovement = 'asset-movement';
    case AssetView = 'asset-view';
    case Asset = 'asset';
    case AssignmentActionUsage = 'assignment-action-usage';
    case Asterisk = 'asterisk';
    case Async = 'async';
    case At = 'at';
    case Attachment = 'attachment';
    case AttributeDefinition = 'attribute-definition';
    case AttributeUsage = 'attribute-usage';
    case AudioConsole = 'audio-console';
    case AugmentedReality = 'augmented-reality';
    case Automatic = 'automatic';
    case Autoscaling = 'autoscaling';
    case Avro = 'avro';
    case Awake = 'awake';
    case Badge = 'badge';
    case BaggageClaim = 'baggage-claim';
    case Bar = 'bar';
    case Barcode = 'barcode';
    case BareMetalServer01 = 'bare-metal-server-01';
    case BareMetalServer02 = 'bare-metal-server-02';
    case BareMetalServer = 'bare-metal-server';
    case Basketball = 'basketball';
    case BastionHost = 'bastion-host';
    case Bat = 'bat';
    case BatchJobStep = 'batch-job-step';
    case BatchJob = 'batch-job';
    case BatteryCharging = 'battery-charging';
    case BatteryEmpty = 'battery-empty';
    case BatteryError = 'battery-error';
    case BatteryFull = 'battery-full';
    case BatteryHalf = 'battery-half';
    case BatteryLow = 'battery-low';
    case BatteryQuarter = 'battery-quarter';
    case BatteryWarning = 'battery-warning';
    case BeeBat = 'bee-bat';
    case Bee = 'bee';
    case Beta = 'beta';
    case Bicycle = 'bicycle';
    case Binding01 = 'binding-01';
    case Binding02 = 'binding-02';
    case Binoculars = 'binoculars';
    case BlandAltmanPlot = 'bland-altman-plot';
    case BlockStorageAlt = 'block-storage-alt';
    case BlockStorage = 'block-storage';
    case Blockchain = 'blockchain';
    case Blog = 'blog';
    case BluetoothOff = 'bluetooth-off';
    case Bluetooth = 'bluetooth';
    case Book = 'book';
    case BookmarkAdd = 'bookmark-add';
    case BookmarkFilled = 'bookmark-filled';
    case Bookmark = 'bookmark';
    case Boolean = 'boolean';
    case BootVolumeAlt = 'boot-volume-alt';
    case BootVolume = 'boot-volume';
    case Boot = 'boot';
    case BorderBottom = 'border-bottom';
    case BorderFull = 'border-full';
    case BorderLeft = 'border-left';
    case BorderNone = 'border-none';
    case BorderRight = 'border-right';
    case BorderTop = 'border-top';
    case Bot = 'bot';
    case Bottles01Dash = 'bottles-01-dash';
    case Bottles01 = 'bottles-01';
    case Bottles02Dash = 'bottles-02-dash';
    case Bottles02 = 'bottles-02';
    case BottlesContainer = 'bottles-container';
    case BottomPanelCloseFilled = 'bottom-panel-close-filled';
    case BottomPanelClose = 'bottom-panel-close';
    case BottomPanelOpenFilled = 'bottom-panel-open-filled';
    case BottomPanelOpen = 'bottom-panel-open';
    case BoxExtraLarge = 'box-extra-large';
    case BoxLarge = 'box-large';
    case BoxMedium = 'box-medium';
    case BoxPlot = 'box-plot';
    case BoxSmall = 'box-small';
    case Box = 'box';
    case Branch = 'branch';
    case BreakingChange = 'breaking-change';
    case BrightnessContrast = 'brightness-contrast';
    case BringForward = 'bring-forward';
    case BringToFront = 'bring-to-front';
    case BuildImage = 'build-image';
    case BuildRun = 'build-run';
    case BuildTool = 'build-tool';
    case BuildingInsights1 = 'building-insights-1';
    case BuildingInsights2 = 'building-insights-2';
    case BuildingInsights3 = 'building-insights-3';
    case Building = 'building';
    case Bullhorn = 'bullhorn';
    case Buoy = 'buoy';
    case Bus = 'bus';
    case BusinessMetrics = 'business-metrics';
    case BusinessProcesses = 'business-processes';
    case ButtonCentered = 'button-centered';
    case ButtonFlushLeft = 'button-flush-left';
    case CabinCareAlert = 'cabin-care-alert';
    case CabinCareAlt = 'cabin-care-alt';
    case CabinCare = 'cabin-care';
    case Cad = 'cad';
    case Cafe = 'cafe';
    case CalculationAlt = 'calculation-alt';
    case Calculation = 'calculation';
    case CalculatorCheck = 'calculator-check';
    case Calculator = 'calculator';
    case CalendarAddAlt = 'calendar-add-alt';
    case CalendarAdd = 'calendar-add';
    case CalendarHeatMap = 'calendar-heat-map';
    case CalendarSettings = 'calendar-settings';
    case CalendarTools = 'calendar-tools';
    case Calendar = 'calendar';
    case Calibrate = 'calibrate';
    case CallsAll = 'calls-all';
    case CallsIncoming = 'calls-incoming';
    case Calls = 'calls';
    case CameraAction = 'camera-action';
    case Camera = 'camera';
    case Campsite = 'campsite';
    case CarFront = 'car-front';
    case Car = 'car';
    case CarbonAccounting = 'carbon-accounting';
    case CarbonForAem = 'carbon-for-aem';
    case CarbonForIbmDotcom = 'carbon-for-ibm-dotcom';
    case CarbonForIbmProduct = 'carbon-for-ibm-product';
    case CarbonForMobile = 'carbon-for-mobile';
    case CarbonForSalesforce = 'carbon-for-salesforce';
    case CarbonUiBuilder = 'carbon-ui-builder';
    case Carbon = 'carbon';
    case CaretDown = 'caret-down';
    case CaretLeft = 'caret-left';
    case CaretRight = 'caret-right';
    case CaretSortDown = 'caret-sort-down';
    case CaretSortUp = 'caret-sort-up';
    case CaretSort = 'caret-sort';
    case CaretUp = 'caret-up';
    case CarouselHorizontal = 'carousel-horizontal';
    case CarouselVertical = 'carousel-vertical';
    case CatalogPublish = 'catalog-publish';
    case Catalog = 'catalog';
    case Categories = 'categories';
    case CategoryAdd = 'category-add';
    case CategoryAnd = 'category-and';
    case CategoryNewEach = 'category-new-each';
    case CategoryNew = 'category-new';
    case Category = 'category';
    case Cda = 'cda';
    case CellTower = 'cell-tower';
    case CenterCircle = 'center-circle';
    case CenterSquare = 'center-square';
    case CenterToFit = 'center-to-fit';
    case CertificateCheck = 'certificate-check';
    case Certificate = 'certificate';
    case ChangeCatalog = 'change-catalog';
    case Channels = 'channels';
    case CharacterDecimal = 'character-decimal';
    case CharacterFraction = 'character-fraction';
    case CharacterInteger = 'character-integer';
    case CharacterLowerCase = 'character-lower-case';
    case CharacterNegativeNumber = 'character-negative-number';
    case CharacterPatterns = 'character-patterns';
    case CharacterSentenceCase = 'character-sentence-case';
    case CharacterUpperCase = 'character-upper-case';
    case CharacterWholeNumber = 'character-whole-number';
    case ChargingStationFilled = 'charging-station-filled';
    case ChargingStation = 'charging-station';
    case Chart3d = 'chart-3d';
    case ChartAreaSmooth = 'chart-area-smooth';
    case ChartAreaStepper = 'chart-area-stepper';
    case ChartArea = 'chart-area';
    case ChartAverage = 'chart-average';
    case ChartBarFloating = 'chart-bar-floating';
    case ChartBarOverlay = 'chart-bar-overlay';
    case ChartBarStacked = 'chart-bar-stacked';
    case ChartBarTarget = 'chart-bar-target';
    case ChartBar = 'chart-bar';
    case ChartBubblePacked = 'chart-bubble-packed';
    case ChartBubble = 'chart-bubble';
    case ChartBullet = 'chart-bullet';
    case ChartCandlestick = 'chart-candlestick';
    case ChartClusterBar = 'chart-cluster-bar';
    case ChartColumnFloating = 'chart-column-floating';
    case ChartColumnTarget = 'chart-column-target';
    case ChartColumn = 'chart-column';
    case ChartComboStacked = 'chart-combo-stacked';
    case ChartCombo = 'chart-combo';
    case ChartCustom = 'chart-custom';
    case ChartDualYAxis = 'chart-dual-y-axis';
    case ChartErrorBarAlt = 'chart-error-bar-alt';
    case ChartErrorBar = 'chart-error-bar';
    case ChartEvaluation = 'chart-evaluation';
    case ChartHighLow = 'chart-high-low';
    case ChartHistogram = 'chart-histogram';
    case ChartLineData = 'chart-line-data';
    case ChartLineSmooth = 'chart-line-smooth';
    case ChartLine = 'chart-line';
    case ChartLogisticRegression = 'chart-logistic-regression';
    case ChartMarimekko = 'chart-marimekko';
    case ChartMaximum = 'chart-maximum';
    case ChartMedian = 'chart-median';
    case ChartMinimum = 'chart-minimum';
    case ChartMultiLine = 'chart-multi-line';
    case ChartMultitype = 'chart-multitype';
    case ChartNetwork = 'chart-network';
    case ChartParallel = 'chart-parallel';
    case ChartPie = 'chart-pie';
    case ChartPlanningWaterfall = 'chart-planning-waterfall';
    case ChartPoint = 'chart-point';
    case ChartPopulation = 'chart-population';
    case ChartRadar = 'chart-radar';
    case ChartRadial = 'chart-radial';
    case ChartRelationship = 'chart-relationship';
    case ChartRing = 'chart-ring';
    case ChartRiver = 'chart-river';
    case ChartRose = 'chart-rose';
    case ChartScatter = 'chart-scatter';
    case ChartSpiral = 'chart-spiral';
    case ChartStacked = 'chart-stacked';
    case ChartStepper = 'chart-stepper';
    case ChartSunburst = 'chart-sunburst';
    case ChartTSne = 'chart-t-sne';
    case ChartTreemap = 'chart-treemap';
    case ChartVennDiagram = 'chart-venn-diagram';
    case ChartViolinPlot = 'chart-violin-plot';
    case ChartWaterfall = 'chart-waterfall';
    case ChartWinLoss = 'chart-win-loss';
    case ChatBot = 'chat-bot';
    case ChatLaunch = 'chat-launch';
    case ChatOff = 'chat-off';
    case ChatOperational = 'chat-operational';
    case Chat = 'chat';
    case CheckboxCheckedFilled = 'checkbox-checked-filled';
    case CheckboxChecked = 'checkbox-checked';
    case CheckboxIndeterminateFilled = 'checkbox-indeterminate-filled';
    case CheckboxIndeterminate = 'checkbox-indeterminate';
    case Checkbox = 'checkbox';
    case CheckmarkFilledError = 'checkmark-filled-error';
    case CheckmarkFilledWarning = 'checkmark-filled-warning';
    case CheckmarkFilled = 'checkmark-filled';
    case CheckmarkOutlineError = 'checkmark-outline-error';
    case CheckmarkOutlineWarning = 'checkmark-outline-warning';
    case CheckmarkOutline = 'checkmark-outline';
    case Checkmark = 'checkmark';
    case ChemistryReference = 'chemistry-reference';
    case Chemistry = 'chemistry';
    case ChevronDownOutline = 'chevron-down-outline';
    case ChevronDown = 'chevron-down';
    case ChevronLeft = 'chevron-left';
    case ChevronMini = 'chevron-mini';
    case ChevronRight = 'chevron-right';
    case ChevronSortDown = 'chevron-sort-down';
    case ChevronSortUp = 'chevron-sort-up';
    case ChevronSort = 'chevron-sort';
    case ChevronUpOutline = 'chevron-up-outline';
    case ChevronUp = 'chevron-up';
    case ChildNode = 'child-node';
    case Chip = 'chip';
    case Choices = 'choices';
    case ChooseItem = 'choose-item';
    case ChoroplethMap = 'choropleth-map';
    case CicsCmas = 'cics-cmas';
    case CicsDb2Connection = 'cics-db2-connection';
    case CicsExplorer = 'cics-explorer';
    case CicsProgram = 'cics-program';
    case CicsRegionAlt = 'cics-region-alt';
    case CicsRegionRouting = 'cics-region-routing';
    case CicsRegionTarget = 'cics-region-target';
    case CicsRegion = 'cics-region';
    case CicsSitOverrides = 'cics-sit-overrides';
    case CicsSit = 'cics-sit';
    case CicsSystemGroup = 'cics-system-group';
    case CicsTransactionServerZos = 'cics-transaction-server-zos';
    case CicsWuiRegion = 'cics-wui-region';
    case Cicsplex = 'cicsplex';
    case CircleDash = 'circle-dash';
    case CircleFilled = 'circle-filled';
    case CircleOutline = 'circle-outline';
    case CirclePacking = 'circle-packing';
    case CircleSolid = 'circle-solid';
    case Classification = 'classification';
    case ClassifierLanguage = 'classifier-language';
    case Clean = 'clean';
    case CloseFilled = 'close-filled';
    case CloseLarge = 'close-large';
    case CloseOutline = 'close-outline';
    case Close = 'close';
    case ClosedCaptionAlt = 'closed-caption-alt';
    case ClosedCaptionFilled = 'closed-caption-filled';
    case ClosedCaption = 'closed-caption';
    case CloudAlerting = 'cloud-alerting';
    case CloudApp = 'cloud-app';
    case CloudAuditing = 'cloud-auditing';
    case CloudCeiling = 'cloud-ceiling';
    case CloudDataOps = 'cloud-data-ops';
    case CloudDownload = 'cloud-download';
    case CloudFoundry1 = 'cloud-foundry-1';
    case CloudFoundry2 = 'cloud-foundry-2';
    case CloudLogging = 'cloud-logging';
    case CloudMonitoring = 'cloud-monitoring';
    case CloudOffline = 'cloud-offline';
    case CloudRegistry = 'cloud-registry';
    case CloudSatelliteConfig = 'cloud-satellite-config';
    case CloudSatelliteLink = 'cloud-satellite-link';
    case CloudSatelliteServices = 'cloud-satellite-services';
    case CloudSatellite = 'cloud-satellite';
    case CloudServiceManagement = 'cloud-service-management';
    case CloudServices = 'cloud-services';
    case CloudUpload = 'cloud-upload';
    case Cloud = 'cloud';
    case Cloudy = 'cloudy';
    case CodeBlock = 'code-block';
    case CodeHide = 'code-hide';
    case CodeReference = 'code-reference';
    case CodeSigningService = 'code-signing-service';
    case Code = 'code';
    case Cognitive = 'cognitive';
    case Collaborate = 'collaborate';
    case CollapseAll = 'collapse-all';
    case CollapseCategories = 'collapse-categories';
    case ColorPalette = 'color-palette';
    case ColorSwitch = 'color-switch';
    case ColumnDelete = 'column-delete';
    case ColumnDependency = 'column-dependency';
    case ColumnInsert = 'column-insert';
    case Column = 'column';
    case Comments = 'comments';
    case Commit = 'commit';
    case CommunicationUnified = 'communication-unified';
    case Compare = 'compare';
    case Compass = 'compass';
    case Concept = 'concept';
    case ConditionPoint = 'condition-point';
    case ConditionWaitPoint = 'condition-wait-point';
    case ConnectRecursive = 'connect-recursive';
    case ConnectReference = 'connect-reference';
    case ConnectSource = 'connect-source';
    case ConnectTarget = 'connect-target';
    case Connect = 'connect';
    case ConnectionFlowUsage = 'connection-flow-usage';
    case ConnectionReceive = 'connection-receive';
    case ConnectionSend = 'connection-send';
    case ConnectionSignalOff = 'connection-signal-off';
    case ConnectionSignal = 'connection-signal';
    case ConnectionTwoWay = 'connection-two-way';
    case ConnectionUsage = 'connection-usage';
    case Constraint = 'constraint';
    case Construction = 'construction';
    case ContainerEngine = 'container-engine';
    case ContainerImagePull = 'container-image-pull';
    case ContainerImagePushPull = 'container-image-push-pull';
    case ContainerImagePush = 'container-image-push';
    case ContainerImage = 'container-image';
    case ContainerRegistry = 'container-registry';
    case ContainerRuntimeMonitor = 'container-runtime-monitor';
    case ContainerRuntime = 'container-runtime';
    case ContainerServices = 'container-services';
    case ContainerSoftware = 'container-software';
    case ContentDeliveryNetwork = 'content-delivery-network';
    case ContentView = 'content-view';
    case ContinueFilled = 'continue-filled';
    case Continue = 'continue';
    case ContinuousDeployment = 'continuous-deployment';
    case ContinuousIntegration = 'continuous-integration';
    case Contrast = 'contrast';
    case ConvertToCloud = 'convert-to-cloud';
    case Cookie = 'cookie';
    case CopyFile = 'copy-file';
    case CopyLink = 'copy-link';
    case Copy = 'copy';
    case Corn = 'corn';
    case Corner = 'corner';
    case Coronavirus = 'coronavirus';
    case CostTotal = 'cost-total';
    case Cost = 'cost';
    case Cough = 'cough';
    case Course = 'course';
    case Covariate = 'covariate';
    case CreateLink = 'create-link';
    case Credentials = 'credentials';
    case CropGrowth = 'crop-growth';
    case CropHealth = 'crop-health';
    case Crop = 'crop';
    case CrossTab = 'cross-tab';
    case Crossroads = 'crossroads';
    case CrowdReportFilled = 'crowd-report-filled';
    case CrowdReport = 'crowd-report';
    case Csv = 'csv';
    case CubeView = 'cube-view';
    case Cube = 'cube';
    case CurrencyBaht = 'currency-baht';
    case CurrencyDollar = 'currency-dollar';
    case CurrencyEuro = 'currency-euro';
    case CurrencyLira = 'currency-lira';
    case CurrencyPound = 'currency-pound';
    case CurrencyRuble = 'currency-ruble';
    case CurrencyRupee = 'currency-rupee';
    case CurrencyShekel = 'currency-shekel';
    case CurrencyWon = 'currency-won';
    case CurrencyYen = 'currency-yen';
    case Currency = 'currency';
    case Cursor1 = 'cursor-1';
    case Cursor2 = 'cursor-2';
    case CustomerService = 'customer-service';
    case Customer = 'customer';
    case CutOut = 'cut-out';
    case Cut = 'cut';
    case Cyclist = 'cyclist';
    case DashboardReference = 'dashboard-reference';
    case Dashboard = 'dashboard';
    case Data1 = 'data-1';
    case Data2 = 'data-2';
    case DataAccessor = 'data-accessor';
    case DataAnalytics = 'data-analytics';
    case DataBackup = 'data-backup';
    case DataBaseAlt = 'data-base-alt';
    case DataBase = 'data-base';
    case DataBin = 'data-bin';
    case DataBlob = 'data-blob';
    case DataCategorical = 'data-categorical';
    case DataCenter = 'data-center';
    case DataCheck = 'data-check';
    case DataClass = 'data-class';
    case DataCollection = 'data-collection';
    case DataConnected = 'data-connected';
    case DataDefinition = 'data-definition';
    case DataDiode = 'data-diode';
    case DataEnrichmentAdd = 'data-enrichment-add';
    case DataEnrichment = 'data-enrichment';
    case DataError = 'data-error';
    case DataFormat = 'data-format';
    case DataPlayer = 'data-player';
    case DataQualityDefinition = 'data-quality-definition';
    case DataReference = 'data-reference';
    case DataRefineryReference = 'data-refinery-reference';
    case DataRefinery = 'data-refinery';
    case DataRegular = 'data-regular';
    case DataSet = 'data-set';
    case DataShare = 'data-share';
    case DataStructured = 'data-structured';
    case DataTableReference = 'data-table-reference';
    case DataTable = 'data-table';
    case DataUnreal = 'data-unreal';
    case DataUnstructured = 'data-unstructured';
    case DataViewAlt = 'data-view-alt';
    case DataView = 'data-view';
    case DataVis1 = 'data-vis-1';
    case DataVis2 = 'data-vis-2';
    case DataVis3 = 'data-vis-3';
    case DataVis4 = 'data-vis-4';
    case DataVolumeAlt = 'data-volume-alt';
    case DataVolume = 'data-volume';
    case DatabaseDatastax = 'database-datastax';
    case DatabaseElastic = 'database-elastic';
    case DatabaseEnterpriseDb2 = 'database-enterprise-db2';
    case DatabaseEnterprisedb = 'database-enterprisedb';
    case DatabaseEtcd = 'database-etcd';
    case DatabaseMessaging = 'database-messaging';
    case DatabaseMongodb = 'database-mongodb';
    case DatabasePostgresql = 'database-postgresql';
    case DatabaseRabbit = 'database-rabbit';
    case DatabaseRedis = 'database-redis';
    case Datastore = 'datastore';
    case Db2BufferPool = 'db2-buffer-pool';
    case Db2DataSharingGroup = 'db2-data-sharing-group';
    case Db2Database = 'db2-database';
    case Debug = 'debug';
    case DecisionNode = 'decision-node';
    case DecisionTree = 'decision-tree';
    case Delete = 'delete';
    case DeliveryAdd = 'delivery-add';
    case DeliveryParcel = 'delivery-parcel';
    case DeliverySettings = 'delivery-settings';
    case DeliveryTruck = 'delivery-truck';
    case Delivery = 'delivery';
    case Demo = 'demo';
    case Departure = 'departure';
    case Dependency = 'dependency';
    case DeployRules = 'deploy-rules';
    case Deploy = 'deploy';
    case DeploymentCanary = 'deployment-canary';
    case DeploymentPattern = 'deployment-pattern';
    case DeploymentPolicy = 'deployment-policy';
    case DeploymentUnitData = 'deployment-unit-data';
    case DeploymentUnitExecution = 'deployment-unit-execution';
    case DeploymentUnitInstallation = 'deployment-unit-installation';
    case DeploymentUnitPresentation = 'deployment-unit-presentation';
    case DeploymentUnitTechnicalData = 'deployment-unit-technical-data';
    case DeploymentUnitTechnicalExecution = 'deployment-unit-technical-execution';
    case DeploymentUnitTechnicalInstallation = 'deployment-unit-technical-installation';
    case DeploymentUnitTechnicalPresentation = 'deployment-unit-technical-presentation';
    case DeskAdjustable = 'desk-adjustable';
    case Development = 'development';
    case DevicesApps = 'devices-apps';
    case Devices = 'devices';
    case DewPointFilled = 'dew-point-filled';
    case DewPoint = 'dew-point';
    case DiagramReference = 'diagram-reference';
    case Diagram = 'diagram';
    case DiamondOutline = 'diamond-outline';
    case DiamondSolid = 'diamond-solid';
    case DirectLink = 'direct-link';
    case DirectionBearRight01Filled = 'direction-bear-right-01-filled';
    case DirectionBearRight01 = 'direction-bear-right-01';
    case DirectionBearRight02Filled = 'direction-bear-right-02-filled';
    case DirectionBearRight02 = 'direction-bear-right-02';
    case DirectionCurveFilled = 'direction-curve-filled';
    case DirectionCurve = 'direction-curve';
    case DirectionForkFilled = 'direction-fork-filled';
    case DirectionFork = 'direction-fork';
    case DirectionLoopLeftFilled = 'direction-loop-left-filled';
    case DirectionLoopLeft = 'direction-loop-left';
    case DirectionLoopRightFilled = 'direction-loop-right-filled';
    case DirectionLoopRight = 'direction-loop-right';
    case DirectionMergeFilled = 'direction-merge-filled';
    case DirectionMerge = 'direction-merge';
    case DirectionRight01Filled = 'direction-right-01-filled';
    case DirectionRight01 = 'direction-right-01';
    case DirectionRight02Filled = 'direction-right-02-filled';
    case DirectionRight02 = 'direction-right-02';
    case DirectionRotaryFirstRightFilled = 'direction-rotary-first-right-filled';
    case DirectionRotaryFirstRight = 'direction-rotary-first-right';
    case DirectionRotaryRightFilled = 'direction-rotary-right-filled';
    case DirectionRotaryRight = 'direction-rotary-right';
    case DirectionRotaryStraightFilled = 'direction-rotary-straight-filled';
    case DirectionRotaryStraight = 'direction-rotary-straight';
    case DirectionSharpTurnFilled = 'direction-sharp-turn-filled';
    case DirectionSharpTurn = 'direction-sharp-turn';
    case DirectionStraightFilled = 'direction-straight-filled';
    case DirectionStraightRightFilled = 'direction-straight-right-filled';
    case DirectionStraightRight = 'direction-straight-right';
    case DirectionStraight = 'direction-straight';
    case DirectionUTurnFilled = 'direction-u-turn-filled';
    case DirectionUTurn = 'direction-u-turn';
    case DirectoryDomain = 'directory-domain';
    case DistributeHorizontalCenter = 'distribute-horizontal-center';
    case DistributeHorizontalLeft = 'distribute-horizontal-left';
    case DistributeHorizontalRight = 'distribute-horizontal-right';
    case DistributeVerticalBottom = 'distribute-vertical-bottom';
    case DistributeVerticalCenter = 'distribute-vertical-center';
    case DistributeVerticalTop = 'distribute-vertical-top';
    case DnsServices = 'dns-services';
    case Doc = 'doc';
    case DocumentAdd = 'document-add';
    case DocumentAttachment = 'document-attachment';
    case DocumentAudio = 'document-audio';
    case DocumentBlank = 'document-blank';
    case DocumentComment = 'document-comment';
    case DocumentConfiguration = 'document-configuration';
    case DocumentDownload = 'document-download';
    case DocumentEpdf = 'document-epdf';
    case DocumentExport = 'document-export';
    case DocumentHorizontal = 'document-horizontal';
    case DocumentImport = 'document-import';
    case DocumentMultiple01 = 'document-multiple-01';
    case DocumentMultiple02 = 'document-multiple-02';
    case DocumentPdf = 'document-pdf';
    case DocumentPreliminary = 'document-preliminary';
    case DocumentProcessor = 'document-processor';
    case DocumentProtected = 'document-protected';
    case DocumentRequirements = 'document-requirements';
    case DocumentSecurity = 'document-security';
    case DocumentSentiment = 'document-sentiment';
    case DocumentSigned = 'document-signed';
    case DocumentSketch = 'document-sketch';
    case DocumentSubject = 'document-subject';
    case DocumentSubtract = 'document-subtract';
    case DocumentTasks = 'document-tasks';
    case DocumentUnknown = 'document-unknown';
    case DocumentUnprotected = 'document-unprotected';
    case DocumentVertical = 'document-vertical';
    case DocumentVideo = 'document-video';
    case DocumentView = 'document-view';
    case DocumentWordProcessorReference = 'document-word-processor-reference';
    case DocumentWordProcessor = 'document-word-processor';
    case Document = 'document';
    case Documentation = 'documentation';
    case DogWalker = 'dog-walker';
    case DotMark = 'dot-mark';
    case DoubleAxisChartBar = 'double-axis-chart-bar';
    case DoubleAxisChartColumn = 'double-axis-chart-column';
    case DoubleInteger = 'double-integer';
    case DownToBottom = 'down-to-bottom';
    case Download = 'download';
    case Downstream = 'downstream';
    case DragHorizontal = 'drag-horizontal';
    case DragVertical = 'drag-vertical';
    case Draggable = 'draggable';
    case Draw = 'draw';
    case DrillBack = 'drill-back';
    case DrillDown = 'drill-down';
    case DrillThrough = 'drill-through';
    case Drink01 = 'drink-01';
    case Drink02 = 'drink-02';
    case DriverAnalysis = 'driver-analysis';
    case DroneDelivery = 'drone-delivery';
    case DroneFront = 'drone-front';
    case DroneVideo = 'drone-video';
    case Drone = 'drone';
    case DropPhotoFilled = 'drop-photo-filled';
    case DropPhoto = 'drop-photo';
    case Drought = 'drought';
    case Dvr = 'dvr';
    case EarthAmericasFilled = 'earth-americas-filled';
    case EarthAmericas = 'earth-americas';
    case EarthEuropeAfricaFilled = 'earth-europe-africa-filled';
    case EarthEuropeAfrica = 'earth-europe-africa';
    case EarthFilled = 'earth-filled';
    case EarthSoutheastAsiaFilled = 'earth-southeast-asia-filled';
    case EarthSoutheastAsia = 'earth-southeast-asia';
    case Earth = 'earth';
    case Earthquake = 'earthquake';
    case EdgeCluster = 'edge-cluster';
    case EdgeDevice = 'edge-device';
    case EdgeNodeAlt = 'edge-node-alt';
    case EdgeNode = 'edge-node';
    case EdgeService = 'edge-service';
    case EditOff = 'edit-off';
    case Edit = 'edit';
    case EdtLoop = 'edt-loop';
    case Education = 'education';
    case ElementPicker = 'element-picker';
    case EmailNew = 'email-new';
    case Email = 'email';
    case EmissionsManagement = 'emissions-management';
    case Encryption = 'encryption';
    case EnergyRenewable = 'energy-renewable';
    case Enterprise = 'enterprise';
    case EnumerationDefinition = 'enumeration-definition';
    case EnumerationUsage = 'enumeration-usage';
    case EqualApproximately = 'equal-approximately';
    case Equalizer = 'equalizer';
    case Erase = 'erase';
    case ErrorFilled = 'error-filled';
    case ErrorOutline = 'error-outline';
    case Error = 'error';
    case EventChange = 'event-change';
    case EventIncident = 'event-incident';
    case EventSchedule = 'event-schedule';
    case EventWarning = 'event-warning';
    case Event = 'event';
    case EventsAlt = 'events-alt';
    case Events = 'events';
    case ExamMode = 'exam-mode';
    case ExecutableProgram = 'executable-program';
    case Exit = 'exit';
    case ExpandAll = 'expand-all';
    case ExpandCategories = 'expand-categories';
    case Explore = 'explore';
    case Export = 'export';
    case Eyedropper = 'eyedropper';
    case FaceActivatedAdd = 'face-activated-add';
    case FaceActivatedFilled = 'face-activated-filled';
    case FaceActivated = 'face-activated';
    case FaceAdd = 'face-add';
    case FaceCool = 'face-cool';
    case FaceDissatisfiedFilled = 'face-dissatisfied-filled';
    case FaceDissatisfied = 'face-dissatisfied';
    case FaceDizzyFilled = 'face-dizzy-filled';
    case FaceDizzy = 'face-dizzy';
    case FaceMask = 'face-mask';
    case FaceNeutralFilled = 'face-neutral-filled';
    case FaceNeutral = 'face-neutral';
    case FacePendingFilled = 'face-pending-filled';
    case FacePending = 'face-pending';
    case FaceSatisfiedFilled = 'face-satisfied-filled';
    case FaceSatisfied = 'face-satisfied';
    case FaceWinkFilled = 'face-wink-filled';
    case FaceWink = 'face-wink';
    case Factor = 'factor';
    case Fade = 'fade';
    case FavoriteFilled = 'favorite-filled';
    case FavoriteHalf = 'favorite-half';
    case Favorite = 'favorite';
    case FeatureMembershipFilled = 'feature-membership-filled';
    case FeatureMembership = 'feature-membership';
    case FeaturePicker = 'feature-picker';
    case FeatureTyping = 'feature-typing';
    case FetchUploadCloud = 'fetch-upload-cloud';
    case FetchUpload = 'fetch-upload';
    case FileStorage = 'file-storage';
    case FilterEdit = 'filter-edit';
    case FilterRemove = 'filter-remove';
    case FilterReset = 'filter-reset';
    case Filter = 'filter';
    case Finance = 'finance';
    case FinancialAssets = 'financial-assets';
    case FingerprintRecognition = 'fingerprint-recognition';
    case Fire = 'fire';
    case FirewallClassic = 'firewall-classic';
    case Firewall = 'firewall';
    case FishMultiple = 'fish-multiple';
    case Fish = 'fish';
    case FitToHeight = 'fit-to-height';
    case FitToScreen = 'fit-to-screen';
    case FitToWidth = 'fit-to-width';
    case FlagFilled = 'flag-filled';
    case Flag = 'flag';
    case FlaggingTaxi = 'flagging-taxi';
    case FlashFilled = 'flash-filled';
    case FlashOffFilled = 'flash-off-filled';
    case FlashOff = 'flash-off';
    case Flash = 'flash';
    case FlightInternational = 'flight-international';
    case FlightRoster = 'flight-roster';
    case FlightSchedule = 'flight-schedule';
    case FloatingIp = 'floating-ip';
    case FloodWarning = 'flood-warning';
    case Flood = 'flood';
    case Floorplan = 'floorplan';
    case FlowConnection = 'flow-connection';
    case FlowData = 'flow-data';
    case FlowLogsVpc = 'flow-logs-vpc';
    case FlowModelerReference = 'flow-modeler-reference';
    case FlowModeler = 'flow-modeler';
    case FlowStreamReference = 'flow-stream-reference';
    case FlowStream = 'flow-stream';
    case Flow = 'flow';
    case Fog = 'fog';
    case FolderAdd = 'folder-add';
    case FolderDetailsReference = 'folder-details-reference';
    case FolderDetails = 'folder-details';
    case FolderMoveTo = 'folder-move-to';
    case FolderOff = 'folder-off';
    case FolderOpen = 'folder-open';
    case FolderParent = 'folder-parent';
    case FolderShared = 'folder-shared';
    case Folder = 'folder';
    case Folders = 'folders';
    case ForLoop = 'for-loop';
    case ForecastHail30 = 'forecast-hail-30';
    case ForecastHail = 'forecast-hail';
    case ForecastLightning30 = 'forecast-lightning-30';
    case ForecastLightning = 'forecast-lightning';
    case ForkNode = 'fork-node';
    case Fork = 'fork';
    case Forum = 'forum';
    case Forward10 = 'forward-10';
    case Forward30 = 'forward-30';
    case Forward5 = 'forward-5';
    case Fragile = 'fragile';
    case Fragments = 'fragments';
    case Friendship = 'friendship';
    case FruitBowl = 'fruit-bowl';
    case Function2 = 'function-2';
    case FunctionMath = 'function-math';
    case Function = 'function';
    case GameConsole = 'game-console';
    case GameWireless = 'game-wireless';
    case Gamification = 'gamification';
    case GasStationFilled = 'gas-station-filled';
    case GasStation = 'gas-station';
    case GatewayApi = 'gateway-api';
    case GatewayMail = 'gateway-mail';
    case GatewayPublic = 'gateway-public';
    case GatewaySecurity = 'gateway-security';
    case GatewayUserAccess = 'gateway-user-access';
    case GatewayVpn = 'gateway-vpn';
    case Gateway = 'gateway';
    case Gears = 'gears';
    case GemReference = 'gem-reference';
    case Gem = 'gem';
    case GenderFemale = 'gender-female';
    case GenderMale = 'gender-male';
    case GeneratePdf = 'generate-pdf';
    case Gif = 'gif';
    case Gift = 'gift';
    case GlobalLoanAndTrial = 'global-loan-and-trial';
    case Globe = 'globe';
    case Gradient = 'gradient';
    case GraphicalDataFlow = 'graphical-data-flow';
    case Grid = 'grid';
    case GroupAccess = 'group-access';
    case GroupAccount = 'group-account';
    case GroupObjectsNew = 'group-objects-new';
    case GroupObjectsSave = 'group-objects-save';
    case GroupObjects = 'group-objects';
    case GroupPresentation = 'group-presentation';
    case GroupResource = 'group-resource';
    case GroupSecurity = 'group-security';
    case Group = 'group';
    case Growth = 'growth';
    case GuiManagement = 'gui-management';
    case Gui = 'gui';
    case Hail = 'hail';
    case Harbor = 'harbor';
    case HardwareSecurityModule = 'hardware-security-module';
    case Hashtag = 'hashtag';
    case HazeNight = 'haze-night';
    case Haze = 'haze';
    case HdFilled = 'hd-filled';
    case Hd = 'hd';
    case Hdr = 'hdr';
    case Headphones = 'headphones';
    case Headset = 'headset';
    case HealthCross = 'health-cross';
    case Hearing = 'hearing';
    case HeatMap02 = 'heat-map-02';
    case HeatMap03 = 'heat-map-03';
    case HeatMapStocks = 'heat-map-stocks';
    case HeatMap = 'heat-map';
    case Helicopter = 'helicopter';
    case HelpDesk = 'help-desk';
    case HelpFilled = 'help-filled';
    case Help = 'help';
    case HexagonOutline = 'hexagon-outline';
    case HexagonSolid = 'hexagon-solid';
    case HexagonVerticalOutline = 'hexagon-vertical-outline';
    case HexagonVerticalSolid = 'hexagon-vertical-solid';
    case Home = 'home';
    case HorizontalView = 'horizontal-view';
    case HospitalBed = 'hospital-bed';
    case Hospital = 'hospital';
    case Hotel = 'hotel';
    case Hourglass = 'hourglass';
    case HtmlReference = 'html-reference';
    case Html = 'html';
    case Http = 'http';
    case HumidityAlt = 'humidity-alt';
    case Humidity = 'humidity';
    case Hurricane = 'hurricane';
    case HybridNetworkingAlt = 'hybrid-networking-alt';
    case HybridNetworking = 'hybrid-networking';
    case IbmAiOnZ = 'ibm-ai-on-z';
    case IbmAiopsInsights = 'ibm-aiops-insights';
    case IbmApiConnect = 'ibm-api-connect';
    case IbmAppConnectEnterprise = 'ibm-app-connect-enterprise';
    case IbmApplicationAndDiscoveryDeliveryIntelligence = 'ibm-application-and-discovery-delivery-intelligence';
    case IbmAspera = 'ibm-aspera';
    case IbmBluepay = 'ibm-bluepay';
    case IbmCloudAppId = 'ibm-cloud-app-id';
    case IbmCloudBackupAndRecovery = 'ibm-cloud-backup-and-recovery';
    case IbmCloudBackupServiceVpc = 'ibm-cloud-backup-service-vpc';
    case IbmCloudBareMetalServer = 'ibm-cloud-bare-metal-server';
    case IbmCloudBareMetalServersVpc = 'ibm-cloud-bare-metal-servers-vpc';
    case IbmCloudCitrixDaas = 'ibm-cloud-citrix-daas';
    case IbmCloudCodeEngine = 'ibm-cloud-code-engine';
    case IbmCloudContinuousDelivery = 'ibm-cloud-continuous-delivery';
    case IbmCloudDatabases = 'ibm-cloud-databases';
    case IbmCloudDedicatedHost = 'ibm-cloud-dedicated-host';
    case IbmCloudDirectLink1Connect = 'ibm-cloud-direct-link-1-connect';
    case IbmCloudDirectLink1DedicatedHosting = 'ibm-cloud-direct-link-1-dedicated-hosting';
    case IbmCloudDirectLink1Dedicated = 'ibm-cloud-direct-link-1-dedicated';
    case IbmCloudDirectLink1Exchange = 'ibm-cloud-direct-link-1-exchange';
    case IbmCloudDirectLink2Connect = 'ibm-cloud-direct-link-2-connect';
    case IbmCloudDirectLink2DedicatedHosting = 'ibm-cloud-direct-link-2-dedicated-hosting';
    case IbmCloudDirectLink2Dedicated = 'ibm-cloud-direct-link-2-dedicated';
    case IbmCloudEssentialSecurityAndObservabilityServices = 'ibm-cloud-essential-security-and-observability-services';
    case IbmCloudEventNotification = 'ibm-cloud-event-notification';
    case IbmCloudEventStreams = 'ibm-cloud-event-streams';
    case IbmCloudForEducation = 'ibm-cloud-for-education';
    case IbmCloudGateKeeper = 'ibm-cloud-gate-keeper';
    case IbmCloudHpc = 'ibm-cloud-hpc';
    case IbmCloudHsm = 'ibm-cloud-hsm';
    case IbmCloudHyperProtectCryptoServices = 'ibm-cloud-hyper-protect-crypto-services';
    case IbmCloudHyperProtectDbaas = 'ibm-cloud-hyper-protect-dbaas';
    case IbmCloudHyperProtectVs = 'ibm-cloud-hyper-protect-vs';
    case IbmCloudInternetServices = 'ibm-cloud-internet-services';
    case IbmCloudIpsecVpn = 'ibm-cloud-ipsec-vpn';
    case IbmCloudKeyProtect = 'ibm-cloud-key-protect';
    case IbmCloudKubernetesService = 'ibm-cloud-kubernetes-service';
    case IbmCloudLogging = 'ibm-cloud-logging';
    case IbmCloudMassDataMigration = 'ibm-cloud-mass-data-migration';
    case IbmCloudObservability = 'ibm-cloud-observability';
    case IbmCloudPakApplications = 'ibm-cloud-pak-applications';
    case IbmCloudPakBusinessAutomation = 'ibm-cloud-pak-business-automation';
    case IbmCloudPakData = 'ibm-cloud-pak-data';
    case IbmCloudPakIntegration = 'ibm-cloud-pak-integration';
    case IbmCloudPakMantaAutomatedDataLineage = 'ibm-cloud-pak-manta-automated-data-lineage';
    case IbmCloudPakMulticloudMgmt = 'ibm-cloud-pak-multicloud-mgmt';
    case IbmCloudPakNetezza = 'ibm-cloud-pak-netezza';
    case IbmCloudPakNetworkAutomation = 'ibm-cloud-pak-network-automation';
    case IbmCloudPakSecurity = 'ibm-cloud-pak-security';
    case IbmCloudPakSystem = 'ibm-cloud-pak-system';
    case IbmCloudPakWatsonAiops = 'ibm-cloud-pak-watson-aiops';
    case IbmCloudPal = 'ibm-cloud-pal';
    case IbmCloudPrivilegedAccessGateway = 'ibm-cloud-privileged-access-gateway';
    case IbmCloudProjects = 'ibm-cloud-projects';
    case IbmCloudResiliency = 'ibm-cloud-resiliency';
    case IbmCloudSecretsManager = 'ibm-cloud-secrets-manager';
    case IbmCloudSecurityComplianceCenterWorkloadProtection = 'ibm-cloud-security-compliance-center-workload-protection';
    case IbmCloudSecurityComplianceCenter = 'ibm-cloud-security-compliance-center';
    case IbmCloudSecurityGroups = 'ibm-cloud-security-groups';
    case IbmCloudSecurity = 'ibm-cloud-security';
    case IbmCloudSubnets = 'ibm-cloud-subnets';
    case IbmCloudSysdigSecure = 'ibm-cloud-sysdig-secure';
    case IbmCloudTransitGateway = 'ibm-cloud-transit-gateway';
    case IbmCloudVirtualServerClassic = 'ibm-cloud-virtual-server-classic';
    case IbmCloudVirtualServerVpc = 'ibm-cloud-virtual-server-vpc';
    case IbmCloudVpcBlockStorageSnapshots = 'ibm-cloud-vpc-block-storage-snapshots';
    case IbmCloudVpcClientVpn = 'ibm-cloud-vpc-client-vpn';
    case IbmCloudVpcEndpoints = 'ibm-cloud-vpc-endpoints';
    case IbmCloudVpcFileStorage = 'ibm-cloud-vpc-file-storage';
    case IbmCloudVpcImages = 'ibm-cloud-vpc-images';
    case IbmCloudVpc = 'ibm-cloud-vpc';
    case IbmCloud = 'ibm-cloud';
    case IbmCloudant = 'ibm-cloudant';
    case IbmConsultingAdvantageAgent = 'ibm-consulting-advantage-agent';
    case IbmConsultingAdvantageApplication = 'ibm-consulting-advantage-application';
    case IbmConsultingAdvantageAssistant = 'ibm-consulting-advantage-assistant';
    case IbmContentServices = 'ibm-content-services';
    case IbmDataPower = 'ibm-data-power';
    case IbmDataProductExchange = 'ibm-data-product-exchange';
    case IbmDataReplication = 'ibm-data-replication';
    case IbmDataband = 'ibm-databand';
    case IbmDatastage = 'ibm-datastage';
    case IbmDb2Alt = 'ibm-db2-alt';
    case IbmDb2Warehouse = 'ibm-db2-warehouse';
    case IbmDb2 = 'ibm-db2';
    case IbmDeployableArchitecture = 'ibm-deployable-architecture';
    case IbmDevopsControl = 'ibm-devops-control';
    case IbmDynamicRouteServer = 'ibm-dynamic-route-server';
    case IbmEloAutomotiveCompliance = 'ibm-elo-automotive-compliance';
    case IbmEloEngineeringInsights = 'ibm-elo-engineering-insights';
    case IbmEloMethodComposer = 'ibm-elo-method-composer';
    case IbmEloPublishing = 'ibm-elo-publishing';
    case IbmEngineeringLifecycleMgmt = 'ibm-engineering-lifecycle-mgmt';
    case IbmEngineeringRequirementsDoorsNext = 'ibm-engineering-requirements-doors-next';
    case IbmEngineeringSystemsDesignRhapsodyModelManager = 'ibm-engineering-systems-design-rhapsody-model-manager';
    case IbmEngineeringSystemsDesignRhapsodySn1 = 'ibm-engineering-systems-design-rhapsody-sn1';
    case IbmEngineeringSystemsDesignRhapsodySn2 = 'ibm-engineering-systems-design-rhapsody-sn2';
    case IbmEngineeringSystemsDesignRhapsody = 'ibm-engineering-systems-design-rhapsody';
    case IbmEngineeringTestMgmt = 'ibm-engineering-test-mgmt';
    case IbmEngineeringWorkflowMgmt = 'ibm-engineering-workflow-mgmt';
    case IbmEventAutomation = 'ibm-event-automation';
    case IbmEventEndpointMgmt = 'ibm-event-endpoint-mgmt';
    case IbmEventProcessing = 'ibm-event-processing';
    case IbmEventStreams = 'ibm-event-streams';
    case IbmGcm = 'ibm-gcm';
    case IbmGlobalStorageArchitecture = 'ibm-global-storage-architecture';
    case IbmGranite = 'ibm-granite';
    case IbmIbv = 'ibm-ibv';
    case IbmInstana = 'ibm-instana';
    case IbmJrs = 'ibm-jrs';
    case IbmKnowledgeCatalogPremium = 'ibm-knowledge-catalog-premium';
    case IbmKnowledgeCatalogStandard = 'ibm-knowledge-catalog-standard';
    case IbmKnowledgeCatalog = 'ibm-knowledge-catalog';
    case IbmLaunchpadS4 = 'ibm-launchpad-s4';
    case IbmLpa = 'ibm-lpa';
    case IbmLqe = 'ibm-lqe';
    case IbmMachineLearningForZos = 'ibm-machine-learning-for-zos';
    case IbmMatch360 = 'ibm-match-360';
    case IbmMaximoApplicationSuite = 'ibm-maximo-application-suite';
    case IbmMq = 'ibm-mq';
    case IbmOpenEnterpriseLanguages = 'ibm-open-enterprise-languages';
    case IbmOpenshiftContainerPlatformOnVpcForRegulatedIndustries = 'ibm-openshift-container-platform-on-vpc-for-regulated-industries';
    case IbmPlanningAnalytics = 'ibm-planning-analytics';
    case IbmPowerVsPrivateCloud = 'ibm-power-vs-private-cloud';
    case IbmPowerVs = 'ibm-power-vs';
    case IbmPowerWithVpc = 'ibm-power-with-vpc';
    case IbmPrivatePathServices = 'ibm-private-path-services';
    case IbmProcessMining = 'ibm-process-mining';
    case IbmQuantumSafeAdvisor = 'ibm-quantum-safe-advisor';
    case IbmQuantumSafeExplorer = 'ibm-quantum-safe-explorer';
    case IbmQuantumSafeRemediator = 'ibm-quantum-safe-remediator';
    case IbmSaasConsole = 'ibm-saas-console';
    case IbmSapOnPower = 'ibm-sap-on-power';
    case IbmSecureInfrastructureOnVpcForRegulatedIndustries = 'ibm-secure-infrastructure-on-vpc-for-regulated-industries';
    case IbmSecurityServices = 'ibm-security-services';
    case IbmSecurity = 'ibm-security';
    case IbmStreamsets = 'ibm-streamsets';
    case IbmTelehealth = 'ibm-telehealth';
    case IbmTenet = 'ibm-tenet';
    case IbmTestAcceleratorForZ = 'ibm-test-accelerator-for-z';
    case IbmToolchain = 'ibm-toolchain';
    case IbmTurbonomic = 'ibm-turbonomic';
    case IbmUnstructuredDataProcessor = 'ibm-unstructured-data-processor';
    case IbmVpnForVpc = 'ibm-vpn-for-vpc';
    case IbmVsiOnVpcForRegulatedIndustries = 'ibm-vsi-on-vpc-for-regulated-industries';
    case IbmWatsonAssistant = 'ibm-watson-assistant';
    case IbmWatsonDiscovery = 'ibm-watson-discovery';
    case IbmWatsonKnowledgeCatalog = 'ibm-watson-knowledge-catalog';
    case IbmWatsonKnowledgeStudio = 'ibm-watson-knowledge-studio';
    case IbmWatsonLanguageTranslator = 'ibm-watson-language-translator';
    case IbmWatsonMachineLearning = 'ibm-watson-machine-learning';
    case IbmWatsonNaturalLanguageClassifier = 'ibm-watson-natural-language-classifier';
    case IbmWatsonNaturalLanguageUnderstanding = 'ibm-watson-natural-language-understanding';
    case IbmWatsonOpenscale = 'ibm-watson-openscale';
    case IbmWatsonOrders = 'ibm-watson-orders';
    case IbmWatsonQuery = 'ibm-watson-query';
    case IbmWatsonSpeechToText = 'ibm-watson-speech-to-text';
    case IbmWatsonStudio = 'ibm-watson-studio';
    case IbmWatsonTextToSpeech = 'ibm-watson-text-to-speech';
    case IbmWatsonToneAnalyzer = 'ibm-watson-tone-analyzer';
    case IbmWatsonxAssistant = 'ibm-watsonx-assistant';
    case IbmWatsonxCodeAssistantForEnterpriseJavaApplications = 'ibm-watsonx-code-assistant-for-enterprise-java-applications';
    case IbmWatsonxCodeAssistantForZRefactor = 'ibm-watsonx-code-assistant-for-z-refactor';
    case IbmWatsonxCodeAssistantForZValidationAssistant = 'ibm-watsonx-code-assistant-for-z-validation-assistant';
    case IbmWatsonxCodeAssistantForZ = 'ibm-watsonx-code-assistant-for-z';
    case IbmWatsonxCodeAssistant = 'ibm-watsonx-code-assistant';
    case IbmWatsonxOrchestrate = 'ibm-watsonx-orchestrate';
    case IbmWaziDeploy = 'ibm-wazi-deploy';
    case IbmZCloudModStack = 'ibm-z-cloud-mod-stack';
    case IbmZCloudProvisioning = 'ibm-z-cloud-provisioning';
    case IbmZEnvironmentsDevSecOps = 'ibm-z-environments-dev-sec-ops';
    case IbmZOpenEditor = 'ibm-z-open-editor';
    case IbmZOsAiControlInterface = 'ibm-z-os-ai-control-interface';
    case IbmZOsContainers = 'ibm-z-os-containers';
    case IbmZOsPackageManager = 'ibm-z-os-package-manager';
    case IbmZOs = 'ibm-z-os';
    case IbmZProcessorCapacityReference = 'ibm-z-processor-capacity-reference';
    case IceAccretion = 'ice-accretion';
    case IceVision = 'ice-vision';
    case IdManagement = 'id-management';
    case Idea = 'idea';
    case Identification = 'identification';
    case IfAction = 'if-action';
    case ImageCopy = 'image-copy';
    case ImageMedical = 'image-medical';
    case ImageReference = 'image-reference';
    case ImageSearchAlt = 'image-search-alt';
    case ImageSearch = 'image-search';
    case ImageService = 'image-service';
    case ImageStoreLocal = 'image-store-local';
    case Image = 'image';
    case ImportExport = 'import-export';
    case ImproveRelevance = 'improve-relevance';
    case InProgressError = 'in-progress-error';
    case InProgressWarning = 'in-progress-warning';
    case InProgress = 'in-progress';
    case IncidentReporter = 'incident-reporter';
    case IncompleteCancel = 'incomplete-cancel';
    case IncompleteError = 'incomplete-error';
    case IncompleteWarning = 'incomplete-warning';
    case Incomplete = 'incomplete';
    case IncreaseLevel = 'increase-level';
    case Industry = 'industry';
    case InfinitySymbol = 'infinity-symbol';
    case InformationDisabled = 'information-disabled';
    case InformationFilled = 'information-filled';
    case InformationSquareFilled = 'information-square-filled';
    case InformationSquare = 'information-square';
    case Information = 'information';
    case InfrastructureClassic = 'infrastructure-classic';
    case InsertPage = 'insert-page';
    case InsertSyntax = 'insert-syntax';
    case Insert = 'insert';
    case Inspection = 'inspection';
    case InstanceBx = 'instance-bx';
    case InstanceClassic = 'instance-classic';
    case InstanceCx = 'instance-cx';
    case InstanceMx = 'instance-mx';
    case InstanceVirtual = 'instance-virtual';
    case Integration = 'integration';
    case IntentRequestActive = 'intent-request-active';
    case IntentRequestCreate = 'intent-request-create';
    case IntentRequestHeal = 'intent-request-heal';
    case IntentRequestInactive = 'intent-request-inactive';
    case IntentRequestScaleIn = 'intent-request-scale-in';
    case IntentRequestScaleOut = 'intent-request-scale-out';
    case IntentRequestUninstall = 'intent-request-uninstall';
    case IntentRequestUpgrade = 'intent-request-upgrade';
    case Interactions = 'interactions';
    case InterfaceDefinitionAlt = 'interface-definition-alt';
    case InterfaceDefinition = 'interface-definition';
    case InterfaceUsage1 = 'interface-usage-1';
    case InterfaceUsageAlt = 'interface-usage-alt';
    case InterfaceUsage = 'interface-usage';
    case Intersect = 'intersect';
    case IntrusionPrevention = 'intrusion-prevention';
    case InventoryManagement = 'inventory-management';
    case IotConnect = 'iot-connect';
    case IotPlatform = 'iot-platform';
    case Ip = 'ip';
    case IsoFilled = 'iso-filled';
    case IsoOutline = 'iso-outline';
    case Iso = 'iso';
    case ItemDefinition = 'item-definition';
    case ItemUsage = 'item-usage';
    case JobDaemon = 'job-daemon';
    case JobRun = 'job-run';
    case JoinFull = 'join-full';
    case JoinInner = 'join-inner';
    case JoinLeft = 'join-left';
    case JoinNode = 'join-node';
    case JoinOuter = 'join-outer';
    case JoinRight = 'join-right';
    case Jpg = 'jpg';
    case JsError = 'js-error';
    case JsonReference = 'json-reference';
    case Json = 'json';
    case JumpLink = 'jump-link';
    case KeepDry = 'keep-dry';
    case Key = 'key';
    case KeyboardOff = 'keyboard-off';
    case Keyboard = 'keyboard';
    case KioskDevice = 'kiosk-device';
    case Kubelet = 'kubelet';
    case KubernetesControlPlaneNode = 'kubernetes-control-plane-node';
    case KubernetesIpAddress = 'kubernetes-ip-address';
    case KubernetesOperator = 'kubernetes-operator';
    case KubernetesPod = 'kubernetes-pod';
    case KubernetesWorkerNode = 'kubernetes-worker-node';
    case Kubernetes = 'kubernetes';
    case Label = 'label';
    case Language = 'language';
    case Laptop = 'laptop';
    case LassoPolygon = 'lasso-polygon';
    case Lasso = 'lasso';
    case Launch = 'launch';
    case LayersExternal = 'layers-external';
    case Layers = 'layers';
    case Legend = 'legend';
    case LetterAa = 'letter-aa';
    case LetterBb = 'letter-bb';
    case LetterCc = 'letter-cc';
    case LetterDd = 'letter-dd';
    case LetterEe = 'letter-ee';
    case LetterFf = 'letter-ff';
    case LetterGg = 'letter-gg';
    case LetterHh = 'letter-hh';
    case LetterIi = 'letter-ii';
    case LetterJj = 'letter-jj';
    case LetterKk = 'letter-kk';
    case LetterLl = 'letter-ll';
    case LetterMm = 'letter-mm';
    case LetterNn = 'letter-nn';
    case LetterOo = 'letter-oo';
    case LetterPp = 'letter-pp';
    case LetterQq = 'letter-qq';
    case LetterRr = 'letter-rr';
    case LetterSs = 'letter-ss';
    case LetterTt = 'letter-tt';
    case LetterUu = 'letter-uu';
    case LetterVv = 'letter-vv';
    case LetterWw = 'letter-ww';
    case LetterXx = 'letter-xx';
    case LetterYy = 'letter-yy';
    case LetterZz = 'letter-zz';
    case LicenseDraft = 'license-draft';
    case LicenseGlobal = 'license-global';
    case LicenseMaintenanceDraft = 'license-maintenance-draft';
    case LicenseMaintenance = 'license-maintenance';
    case LicenseThirdPartyDraft = 'license-third-party-draft';
    case LicenseThirdParty = 'license-third-party';
    case License = 'license';
    case Lifesaver = 'lifesaver';
    case LightFilled = 'light-filled';
    case Light = 'light';
    case Lightning = 'lightning';
    case Link = 'link';
    case LinuxAlt = 'linux-alt';
    case LinuxNamespace = 'linux-namespace';
    case Linux = 'linux';
    case ListBoxes = 'list-boxes';
    case ListBulleted = 'list-bulleted';
    case ListCheckedMirror = 'list-checked-mirror';
    case ListChecked = 'list-checked';
    case ListDropdown = 'list-dropdown';
    case ListNumberedMirror = 'list-numbered-mirror';
    case ListNumbered = 'list-numbered';
    case List = 'list';
    case LoadBalancerApplication = 'load-balancer-application';
    case LoadBalancerClassic = 'load-balancer-classic';
    case LoadBalancerGlobal = 'load-balancer-global';
    case LoadBalancerListener = 'load-balancer-listener';
    case LoadBalancerLocal = 'load-balancer-local';
    case LoadBalancerNetwork = 'load-balancer-network';
    case LoadBalancerPool = 'load-balancer-pool';
    case LoadBalancerVpc = 'load-balancer-vpc';
    case LocationCompanyFilled = 'location-company-filled';
    case LocationCompany = 'location-company';
    case LocationCurrent = 'location-current';
    case LocationFilled = 'location-filled';
    case LocationHazardFilled = 'location-hazard-filled';
    case LocationHazard = 'location-hazard';
    case LocationHeartFilled = 'location-heart-filled';
    case LocationHeart = 'location-heart';
    case LocationInfoFilled = 'location-info-filled';
    case LocationInfo = 'location-info';
    case LocationPersonFilled = 'location-person-filled';
    case LocationPerson = 'location-person';
    case LocationSave = 'location-save';
    case LocationStarFilled = 'location-star-filled';
    case LocationStar = 'location-star';
    case Location = 'location';
    case LockedAndBlocked = 'locked-and-blocked';
    case Locked = 'locked';
    case LogicalPartition = 'logical-partition';
    case Login = 'login';
    case LogoAngular = 'logo-angular';
    case LogoAnsibleCommunity = 'logo-ansible-community';
    case LogoDigg = 'logo-digg';
    case LogoDiscord = 'logo-discord';
    case LogoFacebook = 'logo-facebook';
    case LogoFigma = 'logo-figma';
    case LogoFlickr = 'logo-flickr';
    case LogoGit = 'logo-git';
    case LogoGithub = 'logo-github';
    case LogoGitlab = 'logo-gitlab';
    case LogoGlassdoor = 'logo-glassdoor';
    case LogoInstagram = 'logo-instagram';
    case LogoInvision = 'logo-invision';
    case LogoJupyter = 'logo-jupyter';
    case LogoKeybase = 'logo-keybase';
    case LogoKubernetes = 'logo-kubernetes';
    case LogoLinkedin = 'logo-linkedin';
    case LogoLivestream = 'logo-livestream';
    case LogoMastodon = 'logo-mastodon';
    case LogoMedium = 'logo-medium';
    case LogoNpm = 'logo-npm';
    case LogoOpenshift = 'logo-openshift';
    case LogoPinterest = 'logo-pinterest';
    case LogoPython = 'logo-python';
    case LogoQuora = 'logo-quora';
    case LogoRScript = 'logo-r-script';
    case LogoReact = 'logo-react';
    case LogoRedHatAiInstructlabOnIbmCloud = 'logo-red-hat-ai-instructlab-on-ibm-cloud';
    case LogoRedHatAnsible = 'logo-red-hat-ansible';
    case LogoSketch = 'logo-sketch';
    case LogoSkype = 'logo-skype';
    case LogoSlack = 'logo-slack';
    case LogoSnapchat = 'logo-snapchat';
    case LogoSvelte = 'logo-svelte';
    case LogoTumblr = 'logo-tumblr';
    case LogoTwitter = 'logo-twitter';
    case LogoVmwareAlt = 'logo-vmware-alt';
    case LogoVmware = 'logo-vmware';
    case LogoVue = 'logo-vue';
    case LogoWechat = 'logo-wechat';
    case LogoX = 'logo-x';
    case LogoXing = 'logo-xing';
    case LogoYelp = 'logo-yelp';
    case LogoYoutube = 'logo-youtube';
    case Logout = 'logout';
    case LoopAlt = 'loop-alt';
    case Loop = 'loop';
    case MacCommand = 'mac-command';
    case MacOption = 'mac-option';
    case MacShift = 'mac-shift';
    case Mac = 'mac';
    case MachineLearningModel = 'machine-learning-model';
    case MachineLearning = 'machine-learning';
    case MagicWandFilled = 'magic-wand-filled';
    case MagicWand = 'magic-wand';
    case MailAll = 'mail-all';
    case MailReply = 'mail-reply';
    case ManageProtection = 'manage-protection';
    case ManagedSolutions = 'managed-solutions';
    case MapBoundaryVegetation = 'map-boundary-vegetation';
    case MapBoundary = 'map-boundary';
    case MapCenter = 'map-center';
    case MapIdentify = 'map-identify';
    case Map = 'map';
    case MarineWarning = 'marine-warning';
    case MathCurve = 'math-curve';
    case Maximize = 'maximize';
    case MediaCast = 'media-cast';
    case MediaLibraryFilled = 'media-library-filled';
    case MediaLibrary = 'media-library';
    case MedicationAlert = 'medication-alert';
    case MedicationReminder = 'medication-reminder';
    case Medication = 'medication';
    case Menu = 'menu';
    case MergeNode = 'merge-node';
    case Merge = 'merge';
    case MessageQueue = 'message-queue';
    case MeterAlt = 'meter-alt';
    case Meter = 'meter';
    case MicrophoneFilled = 'microphone-filled';
    case MicrophoneOffFilled = 'microphone-off-filled';
    case MicrophoneOff = 'microphone-off';
    case Microphone = 'microphone';
    case Microscope = 'microscope';
    case Microservices1 = 'microservices-1';
    case Microservices2 = 'microservices-2';
    case MigrateAlt = 'migrate-alt';
    case Migrate = 'migrate';
    case Milestone = 'milestone';
    case MilitaryCamp = 'military-camp';
    case Minimize = 'minimize';
    case MisuseOutline = 'misuse-outline';
    case Misuse = 'misuse';
    case MixedRainHail = 'mixed-rain-hail';
    case MlModelReference = 'ml-model-reference';
    case MobileAdd = 'mobile-add';
    case MobileAudio = 'mobile-audio';
    case MobileCheck = 'mobile-check';
    case MobileCrash = 'mobile-crash';
    case MobileDownload = 'mobile-download';
    case MobileEvent = 'mobile-event';
    case MobileLandscape = 'mobile-landscape';
    case MobileRequest = 'mobile-request';
    case MobileSession = 'mobile-session';
    case MobileViewOrientation = 'mobile-view-orientation';
    case MobileView = 'mobile-view';
    case Mobile = 'mobile';
    case MobilityServices = 'mobility-services';
    case ModelAlt = 'model-alt';
    case ModelBuilderReference = 'model-builder-reference';
    case ModelBuilder = 'model-builder';
    case ModelFoundation = 'model-foundation';
    case ModelReference = 'model-reference';
    case ModelTuned = 'model-tuned';
    case Model = 'model';
    case Money = 'money';
    case Monster = 'monster';
    case Monument = 'monument';
    case Moon = 'moon';
    case Moonrise = 'moonrise';
    case Moonset = 'moonset';
    case MostlyCloudyNight = 'mostly-cloudy-night';
    case MostlyCloudy = 'mostly-cloudy';
    case Mountain = 'mountain';
    case Mov = 'mov';
    case Move = 'move';
    case Movement = 'movement';
    case Mp3 = 'mp3';
    case Mp4 = 'mp4';
    case Mpeg = 'mpeg';
    case Mpg2 = 'mpg2';
    case MultiuserDevice = 'multiuser-device';
    case MusicAdd = 'music-add';
    case MusicRemove = 'music-remove';
    case Music = 'music';
    case Mysql = 'mysql';
    case NameSpace = 'name-space';
    case NavaidCivil = 'navaid-civil';
    case NavaidDme = 'navaid-dme';
    case NavaidHelipad = 'navaid-helipad';
    case NavaidMilitaryCivil = 'navaid-military-civil';
    case NavaidMilitary = 'navaid-military';
    case NavaidNdbDme = 'navaid-ndb-dme';
    case NavaidNdb = 'navaid-ndb';
    case NavaidPrivate = 'navaid-private';
    case NavaidSeaplane = 'navaid-seaplane';
    case NavaidTacan = 'navaid-tacan';
    case NavaidVhfor = 'navaid-vhfor';
    case NavaidVor = 'navaid-vor';
    case NavaidVordme = 'navaid-vordme';
    case NavaidVortac = 'navaid-vortac';
    case Need = 'need';
    case Network1 = 'network-1';
    case Network2 = 'network-2';
    case Network3Reference = 'network-3-reference';
    case Network3 = 'network-3';
    case Network4Reference = 'network-4-reference';
    case Network4 = 'network-4';
    case NetworkAdminControl = 'network-admin-control';
    case NetworkEnterprise = 'network-enterprise';
    case NetworkInterface = 'network-interface';
    case NetworkOverlay = 'network-overlay';
    case NetworkPublic = 'network-public';
    case NetworkTimeProtocol = 'network-time-protocol';
    case NewTab = 'new-tab';
    case NextFilled = 'next-filled';
    case NextOutline = 'next-outline';
    case NoImage = 'no-image';
    case NoTicket = 'no-ticket';
    case Nominal = 'nominal';
    case NonCertified = 'non-certified';
    case NoodleBowl = 'noodle-bowl';
    case NotAvailable = 'not-available';
    case NotSentFilled = 'not-sent-filled';
    case NotSent = 'not-sent';
    case NotebookReference = 'notebook-reference';
    case Notebook = 'notebook';
    case NotificationCounter = 'notification-counter';
    case NotificationFilled = 'notification-filled';
    case NotificationNew = 'notification-new';
    case NotificationOffFilled = 'notification-off-filled';
    case NotificationOff = 'notification-off';
    case Notification = 'notification';
    case NotificationsPaused = 'notifications-paused';
    case NullSign = 'null-sign';
    case Number0 = 'number-0';
    case Number1 = 'number-1';
    case Number2 = 'number-2';
    case Number3 = 'number-3';
    case Number4 = 'number-4';
    case Number5 = 'number-5';
    case Number6 = 'number-6';
    case Number7 = 'number-7';
    case Number8 = 'number-8';
    case Number9 = 'number-9';
    case NumberSmall0 = 'number-small-0';
    case NumberSmall1 = 'number-small-1';
    case NumberSmall2 = 'number-small-2';
    case NumberSmall3 = 'number-small-3';
    case NumberSmall4 = 'number-small-4';
    case NumberSmall5 = 'number-small-5';
    case NumberSmall6 = 'number-small-6';
    case NumberSmall7 = 'number-small-7';
    case NumberSmall8 = 'number-small-8';
    case NumberSmall9 = 'number-small-9';
    case ObjectStorageAlt = 'object-storage-alt';
    case ObjectStorage = 'object-storage';
    case Object = 'object';
    case ObservedHail = 'observed-hail';
    case ObservedLightning = 'observed-lightning';
    case Omega = 'omega';
    case Opacity = 'opacity';
    case OpenPanelBottom = 'open-panel-bottom';
    case OpenPanelFilledBottom = 'open-panel-filled-bottom';
    case OpenPanelFilledLeft = 'open-panel-filled-left';
    case OpenPanelFilledRight = 'open-panel-filled-right';
    case OpenPanelFilledTop = 'open-panel-filled-top';
    case OpenPanelLeft = 'open-panel-left';
    case OpenPanelRight = 'open-panel-right';
    case OpenPanelTop = 'open-panel-top';
    case OperationsField = 'operations-field';
    case OperationsRecord = 'operations-record';
    case OrderDetails = 'order-details';
    case Ordinal = 'ordinal';
    case Outage = 'outage';
    case OutlookSevere = 'outlook-severe';
    case OverflowMenuHorizontal = 'overflow-menu-horizontal';
    case OverflowMenuVertical = 'overflow-menu-vertical';
    case Overlay = 'overlay';
    case PackageNode = 'package-node';
    case PackageTextAnalysis = 'package-text-analysis';
    case Package = 'package';
    case PageBreak = 'page-break';
    case PageFirst = 'page-first';
    case PageLast = 'page-last';
    case PageNumber = 'page-number';
    case PaintBrushAlt = 'paint-brush-alt';
    case PaintBrush = 'paint-brush';
    case PalmTree = 'palm-tree';
    case PanHorizontal = 'pan-horizontal';
    case PanVertical = 'pan-vertical';
    case PanelExpansion = 'panel-expansion';
    case Paragraph = 'paragraph';
    case Parameter = 'parameter';
    case ParentChild = 'parent-child';
    case ParentNode = 'parent-node';
    case PartDefinition = 'part-definition';
    case PartUsage = 'part-usage';
    case PartitionAuto = 'partition-auto';
    case PartitionCollection = 'partition-collection';
    case PartitionRepartition = 'partition-repartition';
    case PartitionSame = 'partition-same';
    case PartitionSpecific = 'partition-specific';
    case PartlyCloudyNight = 'partly-cloudy-night';
    case PartlyCloudy = 'partly-cloudy';
    case Partnership = 'partnership';
    case PassengerDrinks = 'passenger-drinks';
    case PassengerPlus = 'passenger-plus';
    case Password = 'password';
    case Paste = 'paste';
    case PauseFilled = 'pause-filled';
    case PauseFuture = 'pause-future';
    case PauseOutlineFilled = 'pause-outline-filled';
    case PauseOutline = 'pause-outline';
    case PausePast = 'pause-past';
    case Pause = 'pause';
    case PcnENode = 'pcn-e-node';
    case PcnMilitary = 'pcn-military';
    case PcnPNode = 'pcn-p-node';
    case PcnZNode = 'pcn-z-node';
    case PdfReference = 'pdf-reference';
    case Pdf = 'pdf';
    case PedestrianChild = 'pedestrian-child';
    case PedestrianFamily = 'pedestrian-family';
    case Pedestrian = 'pedestrian';
    case PenFountain = 'pen-fountain';
    case Pen = 'pen';
    case PendingFilled = 'pending-filled';
    case Pending = 'pending';
    case PentagonDownOutline = 'pentagon-down-outline';
    case PentagonDownSolid = 'pentagon-down-solid';
    case PentagonLeftOutline = 'pentagon-left-outline';
    case PentagonLeftSolid = 'pentagon-left-solid';
    case PentagonOutline = 'pentagon-outline';
    case PentagonRightOutline = 'pentagon-right-outline';
    case PentagonRightSolid = 'pentagon-right-solid';
    case PentagonSolid = 'pentagon-solid';
    case PercentageFilled = 'percentage-filled';
    case Percentage = 'percentage';
    case PerformAction = 'perform-action';
    case PersonFavorite = 'person-favorite';
    case Person = 'person';
    case Pest = 'pest';
    case PhoneApplication = 'phone-application';
    case PhoneBlockFilled = 'phone-block-filled';
    case PhoneBlock = 'phone-block';
    case PhoneFilled = 'phone-filled';
    case PhoneIncomingFilled = 'phone-incoming-filled';
    case PhoneIncoming = 'phone-incoming';
    case PhoneIp = 'phone-ip';
    case PhoneOffFilled = 'phone-off-filled';
    case PhoneOff = 'phone-off';
    case PhoneOutgoingFilled = 'phone-outgoing-filled';
    case PhoneOutgoing = 'phone-outgoing';
    case PhoneSettings = 'phone-settings';
    case PhoneVoiceFilled = 'phone-voice-filled';
    case PhoneVoice = 'phone-voice';
    case Phone = 'phone';
    case PhraseSentiment = 'phrase-sentiment';
    case PicnicArea = 'picnic-area';
    case PiggyBankSlot = 'piggy-bank-slot';
    case PiggyBank = 'piggy-bank';
    case PillsAdd = 'pills-add';
    case PillsSubtract = 'pills-subtract';
    case Pills = 'pills';
    case PinFilled = 'pin-filled';
    case Pin = 'pin';
    case Pipelines = 'pipelines';
    case Plan = 'plan';
    case PlanePrivate = 'plane-private';
    case PlaneSea = 'plane-sea';
    case Plane = 'plane';
    case Platforms = 'platforms';
    case PlayFilledAlt = 'play-filled-alt';
    case PlayFilled = 'play-filled';
    case PlayOutlineFilled = 'play-outline-filled';
    case PlayOutline = 'play-outline';
    case Play = 'play';
    case Playlist = 'playlist';
    case PlugFilled = 'plug-filled';
    case Plug = 'plug';
    case Png = 'png';
    case PointOfPresence = 'point-of-presence';
    case Police = 'police';
    case Policy = 'policy';
    case Popup = 'popup';
    case PortDefinition = 'port-definition';
    case PortInput = 'port-input';
    case PortOutput = 'port-output';
    case PortUsage = 'port-usage';
    case Portfolio = 'portfolio';
    case PowerEnterprisePoolsMeteredCapacityIntegration = 'power-enterprise-pools-metered-capacity-integration';
    case PowerVirtualServerDisasterRecoveryAutomation = 'power-virtual-server-disaster-recovery-automation';
    case Power = 'power';
    case Ppt = 'ppt';
    case PresentationFile = 'presentation-file';
    case PressureFilled = 'pressure-filled';
    case Pressure = 'pressure';
    case PreviousFilled = 'previous-filled';
    case PreviousOutline = 'previous-outline';
    case PricingConsumption = 'pricing-consumption';
    case PricingContainer = 'pricing-container';
    case PricingQuickProposal = 'pricing-quick-proposal';
    case PricingTailored = 'pricing-tailored';
    case PricingTraditional = 'pricing-traditional';
    case Printer = 'printer';
    case ProcessAutomate = 'process-automate';
    case Process = 'process';
    case Product = 'product';
    case ProgressBarRound = 'progress-bar-round';
    case ProgressBar = 'progress-bar';
    case Promote = 'promote';
    case PromptSession = 'prompt-session';
    case PromptTemplate = 'prompt-template';
    case PropertyRelationship = 'property-relationship';
    case PullRequest = 'pull-request';
    case PunctuationCheck = 'punctuation-check';
    case Purchase = 'purchase';
    case Qiskit = 'qiskit';
    case QqPlot = 'qq-plot';
    case QrCode = 'qr-code';
    case QuadrantPlot = 'quadrant-plot';
    case QueryQueue = 'query-queue';
    case Query = 'query';
    case QuestionAnswering = 'question-answering';
    case Queued = 'queued';
    case Quotes = 'quotes';
    case RadarEnhanced = 'radar-enhanced';
    case RadarWeather = 'radar-weather';
    case Radar = 'radar';
    case RadioButtonChecked = 'radio-button-checked';
    case RadioButton = 'radio-button';
    case RadioCombat = 'radio-combat';
    case RadioPushToTalk = 'radio-push-to-talk';
    case Radio = 'radio';
    case Rag = 'rag';
    case RainDrizzle = 'rain-drizzle';
    case RainDrop = 'rain-drop';
    case RainHeavy = 'rain-heavy';
    case RainScatteredNight = 'rain-scattered-night';
    case RainScattered = 'rain-scattered';
    case Rain = 'rain';
    case Raw = 'raw';
    case Receipt = 'receipt';
    case RecentlyViewed = 'recently-viewed';
    case Recommend = 'recommend';
    case RecordingFilledAlt = 'recording-filled-alt';
    case RecordingFilled = 'recording-filled';
    case Recording = 'recording';
    case Recycle = 'recycle';
    case Redefinition = 'redefinition';
    case Redo = 'redo';
    case RefEvapotranspiration = 'ref-evapotranspiration';
    case ReferenceArchitecture = 'reference-architecture';
    case ReflectHorizontal = 'reflect-horizontal';
    case ReflectVertical = 'reflect-vertical';
    case ReminderMedical = 'reminder-medical';
    case Reminder = 'reminder';
    case Renew = 'renew';
    case RepeatOne = 'repeat-one';
    case Repeat = 'repeat';
    case Replicate = 'replicate';
    case ReplyAll = 'reply-all';
    case Reply = 'reply';
    case RepoArtifact = 'repo-artifact';
    case RepoSourceCode = 'repo-source-code';
    case ReportData = 'report-data';
    case Report = 'report';
    case RequestQuote = 'request-quote';
    case RequirementDefinition = 'requirement-definition';
    case RequirementUsage = 'requirement-usage';
    case ResetAlt = 'reset-alt';
    case Reset = 'reset';
    case Restart = 'restart';
    case RestaurantFine = 'restaurant-fine';
    case Restaurant = 'restaurant';
    case ResultDraft = 'result-draft';
    case ResultNew = 'result-new';
    case ResultOld = 'result-old';
    case Result = 'result';
    case RetryFailed = 'retry-failed';
    case Return = 'return';
    case Review = 'review';
    case Rewind10 = 'rewind-10';
    case Rewind30 = 'rewind-30';
    case Rewind5 = 'rewind-5';
    case RightPanelCloseFilled = 'right-panel-close-filled';
    case RightPanelClose = 'right-panel-close';
    case RightPanelOpenFilled = 'right-panel-open-filled';
    case RightPanelOpen = 'right-panel-open';
    case RoadWeather = 'road-weather';
    case Road = 'road';
    case Roadmap = 'roadmap';
    case Rocket = 'rocket';
    case RotateClockwiseAltFilled = 'rotate-clockwise-alt-filled';
    case RotateClockwiseAlt = 'rotate-clockwise-alt';
    case RotateClockwiseFilled = 'rotate-clockwise-filled';
    case RotateClockwise = 'rotate-clockwise';
    case RotateCounterclockwiseAltFilled = 'rotate-counterclockwise-alt-filled';
    case RotateCounterclockwiseAlt = 'rotate-counterclockwise-alt';
    case RotateCounterclockwiseFilled = 'rotate-counterclockwise-filled';
    case RotateCounterclockwise = 'rotate-counterclockwise';
    case Rotate = 'rotate';
    case RouterVoice = 'router-voice';
    case RouterWifi = 'router-wifi';
    case Router = 'router';
    case RowCollapse = 'row-collapse';
    case RowDelete = 'row-delete';
    case RowExpand = 'row-expand';
    case RowInsert = 'row-insert';
    case Row = 'row';
    case Rss = 'rss';
    case RuleCancelled = 'rule-cancelled';
    case RuleDataQuality = 'rule-data-quality';
    case RuleDraft = 'rule-draft';
    case RuleFilled = 'rule-filled';
    case RuleLocked = 'rule-locked';
    case RulePartial = 'rule-partial';
    case RuleTest = 'rule-test';
    case Rule = 'rule';
    case RulerAlt = 'ruler-alt';
    case Ruler = 'ruler';
    case RunMirror = 'run-mirror';
    case Run = 'run';
    case Running = 'running';
    case SailboatCoastal = 'sailboat-coastal';
    case SailboatOffshore = 'sailboat-offshore';
    case SalesOps = 'sales-ops';
    case SankeyDiagramAlt = 'sankey-diagram-alt';
    case SankeyDiagram = 'sankey-diagram';
    case SatelliteRadar = 'satellite-radar';
    case SatelliteWeather = 'satellite-weather';
    case Satellite = 'satellite';
    case SatisfyDefinition = 'satisfy-definition';
    case SatisfyUsage = 'satisfy-usage';
    case SaveModel = 'save-model';
    case Save = 'save';
    case Scale = 'scale';
    case ScalesTipped = 'scales-tipped';
    case Scales = 'scales';
    case Scalpel = 'scalpel';
    case ScanAlt = 'scan-alt';
    case ScanDisabled = 'scan-disabled';
    case Scan = 'scan';
    case ScatterMatrix = 'scatter-matrix';
    case Schematics = 'schematics';
    case ScisControlTower = 'scis-control-tower';
    case ScisTransparentSupply = 'scis-transparent-supply';
    case ScooterFront = 'scooter-front';
    case Scooter = 'scooter';
    case ScreenMapSet = 'screen-map-set';
    case ScreenMap = 'screen-map';
    case ScreenOff = 'screen-off';
    case Screen = 'screen';
    case ScriptReference = 'script-reference';
    case Script = 'script';
    case Sdk = 'sdk';
    case SearchAdvanced = 'search-advanced';
    case SearchLocateMirror = 'search-locate-mirror';
    case SearchLocate = 'search-locate';
    case Search = 'search';
    case SecurityServices = 'security-services';
    case Security = 'security';
    case Select01 = 'select-01';
    case Select02 = 'select-02';
    case SelectWindow = 'select-window';
    case SendActionUsage = 'send-action-usage';
    case SendAltFilled = 'send-alt-filled';
    case SendAlt = 'send-alt';
    case SendBackward = 'send-backward';
    case SendFilled = 'send-filled';
    case SendToBack = 'send-to-back';
    case Send = 'send';
    case ServerDns = 'server-dns';
    case ServerProxy = 'server-proxy';
    case ServerTime = 'server-time';
    case ServiceDesk = 'service-desk';
    case ServiceId = 'service-id';
    case ServiceLevels = 'service-levels';
    case SessionBorderControl = 'session-border-control';
    case SettingsAdjust = 'settings-adjust';
    case SettingsCheck = 'settings-check';
    case SettingsEdit = 'settings-edit';
    case SettingsServices = 'settings-services';
    case SettingsView = 'settings-view';
    case Settings = 'settings';
    case ShapeExcept = 'shape-except';
    case ShapeExclude = 'shape-exclude';
    case ShapeIntersect = 'shape-intersect';
    case ShapeJoin = 'shape-join';
    case ShapeUnite = 'shape-unite';
    case Shapes = 'shapes';
    case ShareKnowledge = 'share-knowledge';
    case Share = 'share';
    case ShoppingBag = 'shopping-bag';
    case ShoppingCartArrowDown = 'shopping-cart-arrow-down';
    case ShoppingCartArrowUp = 'shopping-cart-arrow-up';
    case ShoppingCartClear = 'shopping-cart-clear';
    case ShoppingCartError = 'shopping-cart-error';
    case ShoppingCartMinus = 'shopping-cart-minus';
    case ShoppingCartPlus = 'shopping-cart-plus';
    case ShoppingCart = 'shopping-cart';
    case ShoppingCatalog = 'shopping-catalog';
    case ShowDataCards = 'show-data-cards';
    case ShrinkScreenFilled = 'shrink-screen-filled';
    case ShrinkScreen = 'shrink-screen';
    case Shuffle = 'shuffle';
    case Shuttle = 'shuttle';
    case SidePanelCloseFilled = 'side-panel-close-filled';
    case SidePanelClose = 'side-panel-close';
    case SidePanelOpenFilled = 'side-panel-open-filled';
    case SidePanelOpen = 'side-panel-open';
    case Sight = 'sight';
    case Sigma = 'sigma';
    case SignalStrength = 'signal-strength';
    case SimCard = 'sim-card';
    case SkillLevelAdvanced = 'skill-level-advanced';
    case SkillLevelBasic = 'skill-level-basic';
    case SkillLevelIntermediate = 'skill-level-intermediate';
    case SkillLevel = 'skill-level';
    case SkipBackFilled = 'skip-back-filled';
    case SkipBackOutlineFilled = 'skip-back-outline-filled';
    case SkipBackOutlineSolid = 'skip-back-outline-solid';
    case SkipBackOutline = 'skip-back-outline';
    case SkipBackSolidFilled = 'skip-back-solid-filled';
    case SkipBack = 'skip-back';
    case SkipForwardFilled = 'skip-forward-filled';
    case SkipForwardOutlineFilled = 'skip-forward-outline-filled';
    case SkipForwardOutlineSolid = 'skip-forward-outline-solid';
    case SkipForwardOutline = 'skip-forward-outline';
    case SkipForwardSolidFilled = 'skip-forward-solid-filled';
    case SkipForward = 'skip-forward';
    case Sleet = 'sleet';
    case Slisor = 'slisor';
    case Slm = 'slm';
    case Smell = 'smell';
    case Smoke = 'smoke';
    case Snooze = 'snooze';
    case SnowBlizzard = 'snow-blizzard';
    case SnowDensity = 'snow-density';
    case SnowHeavy = 'snow-heavy';
    case SnowScatteredNight = 'snow-scattered-night';
    case SnowScattered = 'snow-scattered';
    case Snow = 'snow';
    case Snowflake = 'snowflake';
    case Soccer = 'soccer';
    case SoftwareResourceCluster = 'software-resource-cluster';
    case SoftwareResourceResource = 'software-resource-resource';
    case SoftwareResource = 'software-resource';
    case SoilMoistureField = 'soil-moisture-field';
    case SoilMoistureGlobal = 'soil-moisture-global';
    case SoilMoisture = 'soil-moisture';
    case SoilTemperatureField = 'soil-temperature-field';
    case SoilTemperatureGlobal = 'soil-temperature-global';
    case SoilTemperature = 'soil-temperature';
    case SolarPanel = 'solar-panel';
    case SortAscending = 'sort-ascending';
    case SortDescending = 'sort-descending';
    case SortRemove = 'sort-remove';
    case SortingAToZ = 'sorting-a-to-z';
    case SortingHighestToLowestNumber = 'sorting-highest-to-lowest-number';
    case SortingLowestToHighestNumber = 'sorting-lowest-to-highest-number';
    case SortingZToA = 'sorting-z-to-a';
    case SpellCheck = 'spell-check';
    case SplitScreen = 'split-screen';
    case Split = 'split';
    case SprayPaint = 'spray-paint';
    case Sprout = 'sprout';
    case SpyreAccelerator = 'spyre-accelerator';
    case Sql = 'sql';
    case SquareOutline = 'square-outline';
    case SquareSolid = 'square-solid';
    case StackLimitation = 'stack-limitation';
    case Stamp = 'stamp';
    case StarFilled = 'star-filled';
    case StarHalf = 'star-half';
    case StarReview = 'star-review';
    case Star = 'star';
    case StayInside = 'stay-inside';
    case StemLeafPlot = 'stem-leaf-plot';
    case Stethoscope = 'stethoscope';
    case Stickies = 'stickies';
    case StopFilledAlt = 'stop-filled-alt';
    case StopFilled = 'stop-filled';
    case StopOutlineFilled = 'stop-outline-filled';
    case StopOutline = 'stop-outline';
    case StopSignFilled = 'stop-sign-filled';
    case StopSign = 'stop-sign';
    case Stop = 'stop';
    case StoragePool = 'storage-pool';
    case StorageRequest = 'storage-request';
    case Store = 'store';
    case StormTracker = 'storm-tracker';
    case StrategyPlay = 'strategy-play';
    case Strawberry = 'strawberry';
    case StringInteger = 'string-integer';
    case StringText = 'string-text';
    case Subclassification = 'subclassification';
    case Subdirectory = 'subdirectory';
    case SubflowLocal = 'subflow-local';
    case Subflow = 'subflow';
    case SubjectDefinition = 'subject-definition';
    case SubjectUsage = 'subject-usage';
    case SubnetAclRules = 'subnet-acl-rules';
    case Subsetting = 'subsetting';
    case SubtractAlt = 'subtract-alt';
    case SubtractFilled = 'subtract-filled';
    case SubtractLarge = 'subtract-large';
    case Subtract = 'subtract';
    case SuccessionFlowConnection = 'succession-flow-connection';
    case Succession = 'succession';
    case SummaryKpiMirror = 'summary-kpi-mirror';
    case SummaryKpi = 'summary-kpi';
    case Sun = 'sun';
    case Sunrise = 'sunrise';
    case Sunset = 'sunset';
    case SupportVectorMachine = 'support-vector-machine';
    case Sustainability = 'sustainability';
    case Svg = 'svg';
    case Swim = 'swim';
    case SwimlaneDVertical = 'swimlane-d-vertical';
    case SwitchLayer2 = 'switch-layer-2';
    case SwitchLayer3 = 'switch-layer-3';
    case Switcher = 'switcher';
    case SyncSettings = 'sync-settings';
    case SysProvision = 'sys-provision';
    case SysplexDistributor = 'sysplex-distributor';
    case TableAlias = 'table-alias';
    case TableBuilt = 'table-built';
    case TableOfContents = 'table-of-contents';
    case TableShortcut = 'table-shortcut';
    case TableSplit = 'table-split';
    case Table = 'table';
    case TabletLandscape = 'tablet-landscape';
    case Tablet = 'tablet';
    case TagEdit = 'tag-edit';
    case TagExport = 'tag-export';
    case TagGroup = 'tag-group';
    case TagImport = 'tag-import';
    case TagNone = 'tag-none';
    case Tag = 'tag';
    case Tank = 'tank';
    case TaskAdd = 'task-add';
    case TaskApproved = 'task-approved';
    case TaskAssetView = 'task-asset-view';
    case TaskComplete = 'task-complete';
    case TaskLocation = 'task-location';
    case TaskRemove = 'task-remove';
    case TaskSettings = 'task-settings';
    case TaskStar = 'task-star';
    case TaskTools = 'task-tools';
    case TaskView = 'task-view';
    case Task = 'task';
    case Taste = 'taste';
    case Taxi = 'taxi';
    case TcpIpService = 'tcp-ip-service';
    case TemperatureCelsiusAlt = 'temperature-celsius-alt';
    case TemperatureCelsius = 'temperature-celsius';
    case TemperatureFahrenheitAlt = 'temperature-fahrenheit-alt';
    case TemperatureFahrenheit = 'temperature-fahrenheit';
    case TemperatureFeelsLike = 'temperature-feels-like';
    case TemperatureFrigid = 'temperature-frigid';
    case TemperatureHot = 'temperature-hot';
    case TemperatureInversion = 'temperature-inversion';
    case TemperatureMax = 'temperature-max';
    case TemperatureMin = 'temperature-min';
    case TemperatureWater = 'temperature-water';
    case Temperature = 'temperature';
    case Template = 'template';
    case TennisBall = 'tennis-ball';
    case Tennis = 'tennis';
    case TermReference = 'term-reference';
    case Term = 'term';
    case Terminal3270 = 'terminal-3270';
    case Terminal = 'terminal';
    case TestTool = 'test-tool';
    case TextAlignCenter = 'text-align-center';
    case TextAlignJustify = 'text-align-justify';
    case TextAlignLeft = 'text-align-left';
    case TextAlignMixed = 'text-align-mixed';
    case TextAlignRight = 'text-align-right';
    case TextAllCaps = 'text-all-caps';
    case TextBold = 'text-bold';
    case TextClearFormat = 'text-clear-format';
    case TextColor = 'text-color';
    case TextCreation = 'text-creation';
    case TextFill = 'text-fill';
    case TextFont = 'text-font';
    case TextFootnote = 'text-footnote';
    case TextHighlight = 'text-highlight';
    case TextIndentLess = 'text-indent-less';
    case TextIndentMore = 'text-indent-more';
    case TextIndent = 'text-indent';
    case TextItalic = 'text-italic';
    case TextKerning = 'text-kerning';
    case TextLeading = 'text-leading';
    case TextLineSpacing = 'text-line-spacing';
    case TextLinkAnalysis = 'text-link-analysis';
    case TextLink = 'text-link';
    case TextLongParagraph = 'text-long-paragraph';
    case TextMiningApplier = 'text-mining-applier';
    case TextMining = 'text-mining';
    case TextNewLine = 'text-new-line';
    case TextScale = 'text-scale';
    case TextSelection = 'text-selection';
    case TextShortParagraph = 'text-short-paragraph';
    case TextSmallCaps = 'text-small-caps';
    case TextStrikethrough = 'text-strikethrough';
    case TextSubscript = 'text-subscript';
    case TextSuperscript = 'text-superscript';
    case TextTracking = 'text-tracking';
    case TextUnderline = 'text-underline';
    case TextVerticalAlignment = 'text-vertical-alignment';
    case TextWrap = 'text-wrap';
    case Theater = 'theater';
    case ThisSideUp = 'this-side-up';
    case Thumbnail1 = 'thumbnail-1';
    case Thumbnail2 = 'thumbnail-2';
    case ThumbsDownFilled = 'thumbs-down-filled';
    case ThumbsDown = 'thumbs-down';
    case ThumbsUpDoubleFilled = 'thumbs-up-double-filled';
    case ThumbsUpDouble = 'thumbs-up-double';
    case ThumbsUpFilled = 'thumbs-up-filled';
    case ThumbsUp = 'thumbs-up';
    case ThunderstormScatteredNight = 'thunderstorm-scattered-night';
    case ThunderstormScattered = 'thunderstorm-scattered';
    case ThunderstormSevere = 'thunderstorm-severe';
    case ThunderstormStrong = 'thunderstorm-strong';
    case Thunderstorm = 'thunderstorm';
    case Ticket = 'ticket';
    case Tides = 'tides';
    case Tif = 'tif';
    case TimeFilled = 'time-filled';
    case TimePlot = 'time-plot';
    case Time = 'time';
    case Timer = 'timer';
    case TimingBelt = 'timing-belt';
    case ToolBox = 'tool-box';
    case ToolKit = 'tool-kit';
    case ToolsAlt = 'tools-alt';
    case Tools = 'tools';
    case TornadoWarning = 'tornado-warning';
    case Tornado = 'tornado';
    case Touch1DownFilled = 'touch-1-down-filled';
    case Touch1Down = 'touch-1-down';
    case Touch1Filled = 'touch-1-filled';
    case Touch1 = 'touch-1';
    case Touch2Filled = 'touch-2-filled';
    case Touch2 = 'touch-2';
    case TouchInteraction = 'touch-interaction';
    case Tour = 'tour';
    case TrafficCone = 'traffic-cone';
    case TrafficEvent = 'traffic-event';
    case TrafficFlowIncident = 'traffic-flow-incident';
    case TrafficFlow = 'traffic-flow';
    case TrafficIncident = 'traffic-incident';
    case TrafficWeatherIncident = 'traffic-weather-incident';
    case TrainHeart = 'train-heart';
    case TrainProfile = 'train-profile';
    case TrainSpeed = 'train-speed';
    case TrainTicket = 'train-ticket';
    case TrainTime = 'train-time';
    case Train = 'train';
    case Tram = 'tram';
    case TransformBinary = 'transform-binary';
    case TransformCode = 'transform-code';
    case TransformInstructions = 'transform-instructions';
    case TransformLanguage = 'transform-language';
    case Transgender = 'transgender';
    case Translate = 'translate';
    case TransmissionLte = 'transmission-lte';
    case Transpose = 'transpose';
    case TrashCan = 'trash-can';
    case TreeFallRisk = 'tree-fall-risk';
    case TreeViewAlt = 'tree-view-alt';
    case TreeView = 'tree-view';
    case Tree = 'tree';
    case TriangleDownOutline = 'triangle-down-outline';
    case TriangleDownSolid = 'triangle-down-solid';
    case TriangleLeftOutline = 'triangle-left-outline';
    case TriangleLeftSolid = 'triangle-left-solid';
    case TriangleOutline = 'triangle-outline';
    case TriangleRightOutline = 'triangle-right-outline';
    case TriangleRightSolid = 'triangle-right-solid';
    case TriangleSolid = 'triangle-solid';
    case Trigger = 'trigger';
    case TrophyFilled = 'trophy-filled';
    case Trophy = 'trophy';
    case TropicalStormModelTracks = 'tropical-storm-model-tracks';
    case TropicalStormTracks = 'tropical-storm-tracks';
    case TropicalStorm = 'tropical-storm';
    case TropicalWarning = 'tropical-warning';
    case Tsq = 'tsq';
    case Tsunami = 'tsunami';
    case Tsv = 'tsv';
    case Tuning = 'tuning';
    case TwoFactorAuthentication = 'two-factor-authentication';
    case TwoPersonLift = 'two-person-lift';
    case TxtReference = 'txt-reference';
    case Txt = 'txt';
    case TypePattern = 'type-pattern';
    case Types = 'types';
    case Umbrella = 'umbrella';
    case UndefinedFilled = 'undefined-filled';
    case Undefined = 'undefined';
    case Undo = 'undo';
    case UngroupObjects = 'ungroup-objects';
    case UnknownFilled = 'unknown-filled';
    case Unknown = 'unknown';
    case Unlink = 'unlink';
    case Unlocked = 'unlocked';
    case Unsaved = 'unsaved';
    case UpToTop = 'up-to-top';
    case UpdateNow = 'update-now';
    case Upgrade = 'upgrade';
    case Upload = 'upload';
    case Upstream = 'upstream';
    case Url = 'url';
    case UsageIncludedUseCase = 'usage-included-use-case';
    case Usb = 'usb';
    case UseCaseDefinition = 'use-case-definition';
    case UseCaseUsage = 'use-case-usage';
    case UserAccessLocked = 'user-access-locked';
    case UserAccessUnlocked = 'user-access-unlocked';
    case UserAccess = 'user-access';
    case UserActivity = 'user-activity';
    case UserAdmin = 'user-admin';
    case UserAvatarFilledAlt = 'user-avatar-filled-alt';
    case UserAvatarFilled = 'user-avatar-filled';
    case UserAvatar = 'user-avatar';
    case UserCertification = 'user-certification';
    case UserData = 'user-data';
    case UserFavoriteAltFilled = 'user-favorite-alt-filled';
    case UserFavoriteAlt = 'user-favorite-alt';
    case UserFavorite = 'user-favorite';
    case UserFeedback = 'user-feedback';
    case UserFilled = 'user-filled';
    case UserFollow = 'user-follow';
    case UserIdentification = 'user-identification';
    case UserMilitary = 'user-military';
    case UserMultiple = 'user-multiple';
    case UserOnline = 'user-online';
    case UserProfileAlt = 'user-profile-alt';
    case UserProfile = 'user-profile';
    case UserRole = 'user-role';
    case UserServiceDesk = 'user-service-desk';
    case UserService = 'user-service';
    case UserSettings = 'user-settings';
    case UserSimulation = 'user-simulation';
    case UserSpeaker = 'user-speaker';
    case UserSponsor = 'user-sponsor';
    case UserXRay = 'user-x-ray';
    case User = 'user';
    case UvIndexAlt = 'uv-index-alt';
    case UvIndexFilled = 'uv-index-filled';
    case UvIndex = 'uv-index';
    case ValueVariable = 'value-variable';
    case Van = 'van';
    case VegetationAsset = 'vegetation-asset';
    case VegetationEncroachment = 'vegetation-encroachment';
    case VegetationHeight = 'vegetation-height';
    case VehicleApi = 'vehicle-api';
    case VehicleConnected = 'vehicle-connected';
    case VehicleInsights = 'vehicle-insights';
    case VehicleServices = 'vehicle-services';
    case VersionMajor = 'version-major';
    case VersionMinor = 'version-minor';
    case VersionPatch = 'version-patch';
    case Version = 'version';
    case VerticalView = 'vertical-view';
    case VideoAdd = 'video-add';
    case VideoChat = 'video-chat';
    case VideoFilled = 'video-filled';
    case VideoOffFilled = 'video-off-filled';
    case VideoOff = 'video-off';
    case VideoPlayer = 'video-player';
    case Video = 'video';
    case ViewFilled = 'view-filled';
    case ViewMode1 = 'view-mode-1';
    case ViewMode2 = 'view-mode-2';
    case ViewNext = 'view-next';
    case ViewOffFilled = 'view-off-filled';
    case ViewOff = 'view-off';
    case View = 'view';
    case VirtualColumnKey = 'virtual-column-key';
    case VirtualColumn = 'virtual-column';
    case VirtualDesktop = 'virtual-desktop';
    case VirtualMachine = 'virtual-machine';
    case VirtualPrivateCloudAlt = 'virtual-private-cloud-alt';
    case VirtualPrivateCloud = 'virtual-private-cloud';
    case VisualRecognition = 'visual-recognition';
    case VlanIbm = 'vlan-ibm';
    case Vlan = 'vlan';
    case VmdkDisk = 'vmdk-disk';
    case VoiceActivate = 'voice-activate';
    case Voicemail = 'voicemail';
    case VolumeBlockStorage = 'volume-block-storage';
    case VolumeDownAlt = 'volume-down-alt';
    case VolumeDownFilledAlt = 'volume-down-filled-alt';
    case VolumeDownFilled = 'volume-down-filled';
    case VolumeDown = 'volume-down';
    case VolumeFileStorage = 'volume-file-storage';
    case VolumeMuteFilled = 'volume-mute-filled';
    case VolumeMute = 'volume-mute';
    case VolumeObjectStorage = 'volume-object-storage';
    case VolumeUpAlt = 'volume-up-alt';
    case VolumeUpFilledAlt = 'volume-up-filled-alt';
    case VolumeUpFilled = 'volume-up-filled';
    case VolumeUp = 'volume-up';
    case VpnConnection = 'vpn-connection';
    case VpnPolicy = 'vpn-policy';
    case Vpn = 'vpn';
    case Wallet = 'wallet';
    case WarningAltFilled = 'warning-alt-filled';
    case WarningAltInvertedFilled = 'warning-alt-inverted-filled';
    case WarningAltInverted = 'warning-alt-inverted';
    case WarningAlt = 'warning-alt';
    case WarningDiamond = 'warning-diamond';
    case WarningFilled = 'warning-filled';
    case WarningHexFilled = 'warning-hex-filled';
    case WarningHex = 'warning-hex';
    case WarningMultiple = 'warning-multiple';
    case WarningOther = 'warning-other';
    case WarningSquareFilled = 'warning-square-filled';
    case WarningSquare = 'warning-square';
    case Warning = 'warning';
    case Watch = 'watch';
    case WatsonMachineLearning = 'watson-machine-learning';
    case Watson = 'watson';
    case WatsonxAi = 'watsonx-ai';
    case WatsonxData = 'watsonx-data';
    case WatsonxGovernance = 'watsonx-governance';
    case Watsonx = 'watsonx';
    case WaveDirection = 'wave-direction';
    case WaveHeight = 'wave-height';
    case WavePeriod = 'wave-period';
    case WeatherFrontCold = 'weather-front-cold';
    case WeatherFrontStationary = 'weather-front-stationary';
    case WeatherFrontWarm = 'weather-front-warm';
    case WeatherStation = 'weather-station';
    case WebServicesCluster = 'web-services-cluster';
    case WebServicesContainer = 'web-services-container';
    case WebServicesDefinition = 'web-services-definition';
    case WebServicesService = 'web-services-service';
    case WebServicesTaskDefinitionVersion = 'web-services-task-definition-version';
    case WebServicesTask = 'web-services-task';
    case Webhook = 'webhook';
    case Websheet = 'websheet';
    case Wheat = 'wheat';
    case WhileLoop = 'while-loop';
    case WhitePaper = 'white-paper';
    case WifiBridgeAlt = 'wifi-bridge-alt';
    case WifiBridge = 'wifi-bridge';
    case WifiController = 'wifi-controller';
    case WifiNotSecure = 'wifi-not-secure';
    case WifiOff = 'wifi-off';
    case WifiSecure = 'wifi-secure';
    case Wifi = 'wifi';
    case Wikis = 'wikis';
    case WindGusts = 'wind-gusts';
    case WindPower = 'wind-power';
    case WindStream = 'wind-stream';
    case WindyDust = 'windy-dust';
    case WindySnow = 'windy-snow';
    case WindyStrong = 'windy-strong';
    case Windy = 'windy';
    case WinterWarning = 'winter-warning';
    case WintryMix = 'wintry-mix';
    case WirelessCheckout = 'wireless-checkout';
    case Wmv = 'wmv';
    case WordCloud = 'word-cloud';
    case WorkflowAutomation = 'workflow-automation';
    case WorkspaceImport = 'workspace-import';
    case Workspace = 'workspace';
    case WorshipChristian = 'worship-christian';
    case WorshipJewish = 'worship-jewish';
    case WorshipMuslim = 'worship-muslim';
    case Worship = 'worship';
    case XAxis = 'x-axis';
    case Xls = 'xls';
    case Xml = 'xml';
    case YAxis = 'y-axis';
    case ZAxis = 'z-axis';
    case ZLpar = 'z-lpar';
    case ZSystems = 'z-systems';
    case ZipReference = 'zip-reference';
    case Zip = 'zip';
    case ZoomArea = 'zoom-area';
    case ZoomFit = 'zoom-fit';
    case ZoomInArea = 'zoom-in-area';
    case ZoomIn = 'zoom-in';
    case ZoomOutArea = 'zoom-out-area';
    case ZoomOut = 'zoom-out';
    case ZoomReset = 'zoom-reset';
    case ZosSysplex = 'zos-sysplex';
    case Zos = 'zos';

    public function getIconForSize(IconSize $size): string
    {
        return match ($size) {
            default => "carbon-$this->value",
        };
    }
}
